
parking.elf:     file format elf32-littlenios2
parking.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002e84 memsz 0x00002e84 flags r-x
    LOAD off    0x00003ea4 vaddr 0x0000aea4 paddr 0x0000c27c align 2**12
         filesz 0x000013d8 memsz 0x000013d8 flags rw-
    LOAD off    0x00005654 vaddr 0x0000d654 paddr 0x0000d654 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002cac  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  0000ae64  0000ae64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013d8  0000aea4  0000c27c  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  0000d654  0000d654  00005654  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000527c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000610  00000000  00000000  000052a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00007772  00000000  00000000  000058b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002c23  00000000  00000000  0000d022  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002ee6  00000000  00000000  0000fc45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009dc  00000000  00000000  00012b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001688  00000000  00000000  00013508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000ff8  00000000  00000000  00014b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00015b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00015bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017954  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00017957  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00017963  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00017964  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00017965  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00017970  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001797b  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  00017986  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000027  00000000  00000000  0001798a  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000685cf  00000000  00000000  000179b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000ae64 l    d  .rodata	00000000 .rodata
0000aea4 l    d  .rwdata	00000000 .rwdata
0000d654 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../parking_bsp//obj/HAL/src/crt0.o
00008200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00008450 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000085b4 l     F .text	00000038 alt_dev_reg
0000aea4 l     O .rwdata	00001060 jtag_uart_0
0000bf04 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000088a8 l     F .text	00000204 altera_avalon_jtag_uart_irq
00008aac l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000092a0 l     F .text	00000098 altera_avalon_uart_irq
00009338 l     F .text	000000d8 altera_avalon_uart_rxirq
00009410 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000095a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000097f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00009b2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009c88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009cb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a154 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a28c l     F .text	00000050 alt_get_errno
0000a2dc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0000c170 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000853c g     F .text	00000078 alt_main
0000d678 g     O .bss	00000100 alt_irq
0000c27c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d674 g     O .bss	00000004 errno
0000d660 g     O .bss	00000004 alt_argv
00014250 g       *ABS*	00000000 _gp
0000bff0 g     O .rwdata	00000180 alt_fd_list
0000a718 g     F .text	00000090 alt_find_dev
0000aa78 g     F .text	00000028 memcpy
0000a214 g     F .text	00000078 alt_io_redirect
0000ae64 g       *ABS*	00000000 __DTOR_END__
0000d658 g     O .bss	00000001 id_voiture
00008cac g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000a970 g     F .text	0000008c alt_icache_flush
0000c260 g     O .rwdata	00000004 alt_max_fd
0000c274 g     O .rwdata	00000004 _global_impure_ptr
0000d804 g       *ABS*	00000000 __bss_end
0000a064 g     F .text	000000f0 alt_iic_isr_register
0000a5f4 g     F .text	00000104 alt_tick
000091f8 g     F .text	000000a8 altera_avalon_uart_init
0000a018 g     F .text	0000004c alt_ic_irq_enabled
0000a55c g     F .text	00000098 alt_alarm_stop
0000d668 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000cc alt_irq_handler
0000bfc8 g     O .rwdata	00000028 alt_dev_null
00009c44 g     F .text	00000044 alt_dcache_flush_all
0000c27c g       *ABS*	00000000 __ram_rwdata_end
0000c258 g     O .rwdata	00000008 alt_dev_list
0000aea4 g       *ABS*	00000000 __ram_rodata_end
0000d804 g       *ABS*	00000000 end
00009844 g     F .text	000001a8 altera_avalon_uart_write
000087e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000ae64 g       *ABS*	00000000 __CTOR_LIST__
0000e590 g       *ABS*	00000000 __alt_stack_pointer
00009148 g     F .text	00000060 altera_avalon_uart_write_fd
000091a8 g     F .text	00000050 altera_avalon_uart_close_fd
00008ec4 g     F .text	00000224 altera_avalon_jtag_uart_write
0000ac50 g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000004c _start
0000d66c g     O .bss	00000004 _alt_tick_rate
0000d670 g     O .bss	00000004 _alt_nticks
00008620 g     F .text	00000064 alt_sys_init
0000aac8 g     F .text	00000188 __register_exitproc
00008b50 g     F .text	00000068 altera_avalon_jtag_uart_close
0000aea4 g       *ABS*	00000000 __ram_rwdata_start
0000ae64 g       *ABS*	00000000 __ram_rodata_start
00008684 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a8bc g     F .text	000000b4 alt_get_fd
0000aa30 g     F .text	00000048 memcmp
00008744 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000d804 g       *ABS*	00000000 __alt_stack_base
00008794 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a7a8 g     F .text	00000114 alt_find_file
00009d04 g     F .text	000000a0 alt_dev_llist_insert
0000d654 g       *ABS*	00000000 __bss_start
00008324 g     F .text	0000012c main
0000d664 g     O .bss	00000004 alt_envp
000086e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d778 g     O .bss	0000008c _atexit0
0000c264 g     O .rwdata	00000004 alt_errno
0000ae64 g       *ABS*	00000000 __CTOR_END__
0000ae64 g       *ABS*	00000000 __flash_rodata_start
0000ae64 g       *ABS*	00000000 __DTOR_LIST__
0000d654 g     O .bss	00000004 count
000085ec g     F .text	00000034 alt_irq_init
0000a4fc g     F .text	00000060 alt_release_fd
0000a9fc g     F .text	00000014 atexit
0000c278 g     O .rwdata	00000004 _impure_ptr
0000d65c g     O .bss	00000004 alt_argc
00009e00 g     F .text	0000005c _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000c250 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009e8c g     F .text	00000050 alt_ic_isr_register
0000c27c g       *ABS*	00000000 _edata
000090e8 g     F .text	00000060 altera_avalon_uart_read_fd
0000d804 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
00008bb8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00009f78 g     F .text	000000a0 alt_ic_irq_disable
0000a6f8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000aa10 g     F .text	00000020 exit
0000e590 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000954c g     F .text	00000054 altera_avalon_uart_close
0000ae28 g     F .text	0000003c _exit
000099ec g     F .text	00000140 alt_alarm_start
0000aaa0 g     F .text	00000028 strlen
0000a3a8 g     F .text	00000154 open
00009e5c g     F .text	00000030 alt_icache_flush_all
0000c268 g     O .rwdata	00000004 alt_priority_mask
00009edc g     F .text	0000009c alt_ic_irq_enable
000095f0 g     F .text	00000204 altera_avalon_uart_read
0000c26c g     O .rwdata	00000008 alt_alarm_list
00009da4 g     F .text	0000005c _do_ctors
00008204 g     F .text	00000120 Display
00009b7c g     F .text	000000c8 close
000084bc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f59e04 	addi	r3,r3,-10632
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21359e04 	addi	r4,r4,-10632
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    81b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    81bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    81c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    81c4:	00bffd16 	blt	zero,r2,81bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81c8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81cc:	def96414 	ori	sp,sp,58768
    movhi gp, %hi(_gp)
    81d0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81d4:	d6909414 	ori	gp,gp,16976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81d8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81dc:	10b59514 	ori	r2,r2,54868

    movhi r3, %hi(__bss_end)
    81e0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81e4:	18f60114 	ori	r3,r3,55300

    beq r2, r3, 1f
    81e8:	10c00326 	beq	r2,r3,81f8 <_start+0x40>

0:
    stw zero, (r2)
    81ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81f4:	10fffd36 	bltu	r2,r3,81ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81f8:	00084bc0 	call	84bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81fc:	000853c0 	call	853c <alt_main>

00008200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8200:	003fff06 	br	8200 <alt_after_alt_main>

00008204 <Display>:
#include <stdio.h>
#include "altera_avalon_uart_regs.h"


void Display(int valeur)
{
    8204:	defffe04 	addi	sp,sp,-8
    8208:	df000115 	stw	fp,4(sp)
    820c:	df000104 	addi	fp,sp,4
    8210:	e13fff15 	stw	r4,-4(fp)
	switch(valeur) {
    8214:	e0bfff17 	ldw	r2,-4(fp)
    8218:	10800228 	cmpgeui	r2,r2,8
    821c:	1000381e 	bne	r2,zero,8300 <Display+0xfc>
    8220:	e0bfff17 	ldw	r2,-4(fp)
    8224:	1085883a 	add	r2,r2,r2
    8228:	1087883a 	add	r3,r2,r2
    822c:	00800074 	movhi	r2,1
    8230:	10a09004 	addi	r2,r2,-32192
    8234:	1885883a 	add	r2,r3,r2
    8238:	10800017 	ldw	r2,0(r2)
    823c:	1000683a 	jmp	r2
    8240:	00008260 	cmpeqi	zero,zero,521
    8244:	00008274 	movhi	zero,521
    8248:	00008288 	cmpgei	zero,zero,522
    824c:	0000829c 	xori	zero,zero,522
    8250:	000082b0 	cmpltui	zero,zero,522
    8254:	000082c4 	movi	zero,523
    8258:	000082d8 	cmpnei	zero,zero,523
    825c:	000082ec 	andhi	zero,zero,523
	  case 0:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x3F);
    8260:	00c00fc4 	movi	r3,63
    8264:	00800074 	movhi	r2,1
    8268:	10843404 	addi	r2,r2,4304
    826c:	10c00035 	stwio	r3,0(r2)
	    break;
    8270:	00002806 	br	8314 <Display+0x110>
	  case 1:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x06);
    8274:	00c00184 	movi	r3,6
    8278:	00800074 	movhi	r2,1
    827c:	10843404 	addi	r2,r2,4304
    8280:	10c00035 	stwio	r3,0(r2)
	    break;
    8284:	00002306 	br	8314 <Display+0x110>
	  case 2:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x5B);
    8288:	00c016c4 	movi	r3,91
    828c:	00800074 	movhi	r2,1
    8290:	10843404 	addi	r2,r2,4304
    8294:	10c00035 	stwio	r3,0(r2)
	  	    break;
    8298:	00001e06 	br	8314 <Display+0x110>
	  case 3:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x4F);
    829c:	00c013c4 	movi	r3,79
    82a0:	00800074 	movhi	r2,1
    82a4:	10843404 	addi	r2,r2,4304
    82a8:	10c00035 	stwio	r3,0(r2)
	  	    break;
    82ac:	00001906 	br	8314 <Display+0x110>
	  case 4:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x66);
    82b0:	00c01984 	movi	r3,102
    82b4:	00800074 	movhi	r2,1
    82b8:	10843404 	addi	r2,r2,4304
    82bc:	10c00035 	stwio	r3,0(r2)
	  	    break;
    82c0:	00001406 	br	8314 <Display+0x110>
	  case 5:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x6D);
    82c4:	00c01b44 	movi	r3,109
    82c8:	00800074 	movhi	r2,1
    82cc:	10843404 	addi	r2,r2,4304
    82d0:	10c00035 	stwio	r3,0(r2)
	  	    break;
    82d4:	00000f06 	br	8314 <Display+0x110>
	  case 6:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x7D);
    82d8:	00c01f44 	movi	r3,125
    82dc:	00800074 	movhi	r2,1
    82e0:	10843404 	addi	r2,r2,4304
    82e4:	10c00035 	stwio	r3,0(r2)
	  	    break;
    82e8:	00000a06 	br	8314 <Display+0x110>
	  case 7:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x47);
    82ec:	00c011c4 	movi	r3,71
    82f0:	00800074 	movhi	r2,1
    82f4:	10843404 	addi	r2,r2,4304
    82f8:	10c00035 	stwio	r3,0(r2)
	  	    break;
    82fc:	00000506 	br	8314 <Display+0x110>
	  default:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_8_BASE,0x3F);
    8300:	00c00fc4 	movi	r3,63
    8304:	00800074 	movhi	r2,1
    8308:	10843404 	addi	r2,r2,4304
    830c:	10c00035 	stwio	r3,0(r2)
		    break;
    8310:	0001883a 	nop
	}

}
    8314:	e037883a 	mov	sp,fp
    8318:	df000017 	ldw	fp,0(sp)
    831c:	dec00104 	addi	sp,sp,4
    8320:	f800283a 	ret

00008324 <main>:
int count = 0;
char id_voiture;
int main()
{
    8324:	defffe04 	addi	sp,sp,-8
    8328:	dfc00115 	stw	ra,4(sp)
    832c:	df000015 	stw	fp,0(sp)
    8330:	d839883a 	mov	fp,sp
	Display(0);
    8334:	0009883a 	mov	r4,zero
    8338:	00082040 	call	8204 <Display>
    count = 0;
    833c:	d0250115 	stw	zero,-27644(gp)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
    8340:	0007883a 	mov	r3,zero
    8344:	00800074 	movhi	r2,1
    8348:	10843c04 	addi	r2,r2,4336
    834c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,0);
    8350:	0007883a 	mov	r3,zero
    8354:	00800074 	movhi	r2,1
    8358:	10844004 	addi	r2,r2,4352
    835c:	10c00035 	stwio	r3,0(r2)

  while(1){
	  while(IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE)!=0)
    8360:	00002a06 	br	840c <main+0xe8>
	  {
		  if(IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE) == 1)
    8364:	00800074 	movhi	r2,1
    8368:	10845004 	addi	r2,r2,4416
    836c:	10800037 	ldwio	r2,0(r2)
    8370:	10800058 	cmpnei	r2,r2,1
    8374:	1000121e 	bne	r2,zero,83c0 <main+0x9c>
		  {
			  id_voiture = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8378:	00800074 	movhi	r2,1
    837c:	10840804 	addi	r2,r2,4128
    8380:	10800037 	ldwio	r2,0(r2)
    8384:	d0a50205 	stb	r2,-27640(gp)
			  IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,1);
    8388:	00c00044 	movi	r3,1
    838c:	00800074 	movhi	r2,1
    8390:	10844004 	addi	r2,r2,4352
    8394:	10c00035 	stwio	r3,0(r2)
			  count++;
    8398:	d0a50117 	ldw	r2,-27644(gp)
    839c:	10800044 	addi	r2,r2,1
    83a0:	d0a50115 	stw	r2,-27644(gp)
			  Display(count);
    83a4:	d0a50117 	ldw	r2,-27644(gp)
    83a8:	1009883a 	mov	r4,r2
    83ac:	00082040 	call	8204 <Display>
			  IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,0);
    83b0:	0007883a 	mov	r3,zero
    83b4:	00800074 	movhi	r2,1
    83b8:	10844004 	addi	r2,r2,4352
    83bc:	10c00035 	stwio	r3,0(r2)
		  }
		  if(IORD_ALTERA_AVALON_PIO_DATA(PIO_2_BASE) == 1)
    83c0:	00800074 	movhi	r2,1
    83c4:	10844c04 	addi	r2,r2,4400
    83c8:	10800037 	ldwio	r2,0(r2)
    83cc:	10800058 	cmpnei	r2,r2,1
    83d0:	10000e1e 	bne	r2,zero,840c <main+0xe8>
		  {
			  IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,1);
    83d4:	00c00044 	movi	r3,1
    83d8:	00800074 	movhi	r2,1
    83dc:	10843c04 	addi	r2,r2,4336
    83e0:	10c00035 	stwio	r3,0(r2)
			  count--;
    83e4:	d0a50117 	ldw	r2,-27644(gp)
    83e8:	10bfffc4 	addi	r2,r2,-1
    83ec:	d0a50115 	stw	r2,-27644(gp)
			  Display(count);
    83f0:	d0a50117 	ldw	r2,-27644(gp)
    83f4:	1009883a 	mov	r4,r2
    83f8:	00082040 	call	8204 <Display>
			  IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
    83fc:	0007883a 	mov	r3,zero
    8400:	00800074 	movhi	r2,1
    8404:	10843c04 	addi	r2,r2,4336
    8408:	10c00035 	stwio	r3,0(r2)
    count = 0;
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,0);

  while(1){
	  while(IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE)!=0)
    840c:	00800074 	movhi	r2,1
    8410:	10845404 	addi	r2,r2,4432
    8414:	10800037 	ldwio	r2,0(r2)
    8418:	103fd21e 	bne	r2,zero,8364 <main+0x40>
			  count--;
			  Display(count);
			  IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
		  }
	  }
	  Display(0);
    841c:	0009883a 	mov	r4,zero
    8420:	00082040 	call	8204 <Display>
	  count = 0;
    8424:	d0250115 	stw	zero,-27644(gp)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
    8428:	0007883a 	mov	r3,zero
    842c:	00800074 	movhi	r2,1
    8430:	10843c04 	addi	r2,r2,4336
    8434:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,0);
    8438:	0007883a 	mov	r3,zero
    843c:	00800074 	movhi	r2,1
    8440:	10844004 	addi	r2,r2,4352
    8444:	10c00035 	stwio	r3,0(r2)
  }
    8448:	0001883a 	nop
    count = 0;
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_6_BASE,0);
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_5_BASE,0);

  while(1){
	  while(IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE)!=0)
    844c:	003fef06 	br	840c <main+0xe8>

00008450 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8450:	defffc04 	addi	sp,sp,-16
    8454:	df000315 	stw	fp,12(sp)
    8458:	df000304 	addi	fp,sp,12
    845c:	e13ffd15 	stw	r4,-12(fp)
    8460:	e17ffe15 	stw	r5,-8(fp)
    8464:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8468:	e0fffe17 	ldw	r3,-8(fp)
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	18800e26 	beq	r3,r2,84ac <alt_load_section+0x5c>
  {
    while( to != end )
    8474:	00000a06 	br	84a0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8478:	e0bffd17 	ldw	r2,-12(fp)
    847c:	10c00017 	ldw	r3,0(r2)
    8480:	e0bffe17 	ldw	r2,-8(fp)
    8484:	10c00015 	stw	r3,0(r2)
    8488:	e0bffe17 	ldw	r2,-8(fp)
    848c:	10800104 	addi	r2,r2,4
    8490:	e0bffe15 	stw	r2,-8(fp)
    8494:	e0bffd17 	ldw	r2,-12(fp)
    8498:	10800104 	addi	r2,r2,4
    849c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    84a0:	e0fffe17 	ldw	r3,-8(fp)
    84a4:	e0bfff17 	ldw	r2,-4(fp)
    84a8:	18bff31e 	bne	r3,r2,8478 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    84ac:	e037883a 	mov	sp,fp
    84b0:	df000017 	ldw	fp,0(sp)
    84b4:	dec00104 	addi	sp,sp,4
    84b8:	f800283a 	ret

000084bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    84bc:	defffe04 	addi	sp,sp,-8
    84c0:	dfc00115 	stw	ra,4(sp)
    84c4:	df000015 	stw	fp,0(sp)
    84c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    84cc:	01000074 	movhi	r4,1
    84d0:	21309f04 	addi	r4,r4,-15748
    84d4:	01400074 	movhi	r5,1
    84d8:	296ba904 	addi	r5,r5,-20828
    84dc:	01800074 	movhi	r6,1
    84e0:	31b09f04 	addi	r6,r6,-15748
    84e4:	00084500 	call	8450 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    84e8:	01000074 	movhi	r4,1
    84ec:	21200804 	addi	r4,r4,-32736
    84f0:	01400074 	movhi	r5,1
    84f4:	29600804 	addi	r5,r5,-32736
    84f8:	01800074 	movhi	r6,1
    84fc:	31a06e04 	addi	r6,r6,-32328
    8500:	00084500 	call	8450 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8504:	01000074 	movhi	r4,1
    8508:	212b9904 	addi	r4,r4,-20892
    850c:	01400074 	movhi	r5,1
    8510:	296b9904 	addi	r5,r5,-20892
    8514:	01800074 	movhi	r6,1
    8518:	31aba904 	addi	r6,r6,-20828
    851c:	00084500 	call	8450 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8520:	0009c440 	call	9c44 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8524:	0009e5c0 	call	9e5c <alt_icache_flush_all>
}
    8528:	e037883a 	mov	sp,fp
    852c:	dfc00117 	ldw	ra,4(sp)
    8530:	df000017 	ldw	fp,0(sp)
    8534:	dec00204 	addi	sp,sp,8
    8538:	f800283a 	ret

0000853c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    853c:	defffd04 	addi	sp,sp,-12
    8540:	dfc00215 	stw	ra,8(sp)
    8544:	df000115 	stw	fp,4(sp)
    8548:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    854c:	0009883a 	mov	r4,zero
    8550:	00085ec0 	call	85ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8554:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8558:	00086200 	call	8620 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    855c:	01000074 	movhi	r4,1
    8560:	212b9904 	addi	r4,r4,-20892
    8564:	01400074 	movhi	r5,1
    8568:	296b9904 	addi	r5,r5,-20892
    856c:	01800074 	movhi	r6,1
    8570:	31ab9904 	addi	r6,r6,-20892
    8574:	000a2140 	call	a214 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8578:	0009da40 	call	9da4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    857c:	01000074 	movhi	r4,1
    8580:	21278004 	addi	r4,r4,-25088
    8584:	000a9fc0 	call	a9fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8588:	d1250317 	ldw	r4,-27636(gp)
    858c:	d0e50417 	ldw	r3,-27632(gp)
    8590:	d0a50517 	ldw	r2,-27628(gp)
    8594:	180b883a 	mov	r5,r3
    8598:	100d883a 	mov	r6,r2
    859c:	00083240 	call	8324 <main>
    85a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    85a4:	01000044 	movi	r4,1
    85a8:	0009b7c0 	call	9b7c <close>
  exit (result);
    85ac:	e13fff17 	ldw	r4,-4(fp)
    85b0:	000aa100 	call	aa10 <exit>

000085b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    85b4:	defffd04 	addi	sp,sp,-12
    85b8:	dfc00215 	stw	ra,8(sp)
    85bc:	df000115 	stw	fp,4(sp)
    85c0:	df000104 	addi	fp,sp,4
    85c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    85c8:	e13fff17 	ldw	r4,-4(fp)
    85cc:	01400074 	movhi	r5,1
    85d0:	29709604 	addi	r5,r5,-15784
    85d4:	0009d040 	call	9d04 <alt_dev_llist_insert>
}
    85d8:	e037883a 	mov	sp,fp
    85dc:	dfc00117 	ldw	ra,4(sp)
    85e0:	df000017 	ldw	fp,0(sp)
    85e4:	dec00204 	addi	sp,sp,8
    85e8:	f800283a 	ret

000085ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    85ec:	defffd04 	addi	sp,sp,-12
    85f0:	dfc00215 	stw	ra,8(sp)
    85f4:	df000115 	stw	fp,4(sp)
    85f8:	df000104 	addi	fp,sp,4
    85fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8600:	000a6f80 	call	a6f8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8604:	00800044 	movi	r2,1
    8608:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    860c:	e037883a 	mov	sp,fp
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	df000017 	ldw	fp,0(sp)
    8618:	dec00204 	addi	sp,sp,8
    861c:	f800283a 	ret

00008620 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8620:	defffe04 	addi	sp,sp,-8
    8624:	dfc00115 	stw	ra,4(sp)
    8628:	df000015 	stw	fp,0(sp)
    862c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8630:	01000074 	movhi	r4,1
    8634:	212bb304 	addi	r4,r4,-20788
    8638:	000b883a 	mov	r5,zero
    863c:	000d883a 	mov	r6,zero
    8640:	00087e80 	call	87e8 <altera_avalon_jtag_uart_init>
    8644:	01000074 	movhi	r4,1
    8648:	212ba904 	addi	r4,r4,-20828
    864c:	00085b40 	call	85b4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    8650:	01000074 	movhi	r4,1
    8654:	212fcb04 	addi	r4,r4,-16596
    8658:	000b883a 	mov	r5,zero
    865c:	01800044 	movi	r6,1
    8660:	00091f80 	call	91f8 <altera_avalon_uart_init>
    8664:	01000074 	movhi	r4,1
    8668:	212fc104 	addi	r4,r4,-16636
    866c:	00085b40 	call	85b4 <alt_dev_reg>
}
    8670:	e037883a 	mov	sp,fp
    8674:	dfc00117 	ldw	ra,4(sp)
    8678:	df000017 	ldw	fp,0(sp)
    867c:	dec00204 	addi	sp,sp,8
    8680:	f800283a 	ret

00008684 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8684:	defffa04 	addi	sp,sp,-24
    8688:	dfc00515 	stw	ra,20(sp)
    868c:	df000415 	stw	fp,16(sp)
    8690:	df000404 	addi	fp,sp,16
    8694:	e13ffd15 	stw	r4,-12(fp)
    8698:	e17ffe15 	stw	r5,-8(fp)
    869c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    86a0:	e0bffd17 	ldw	r2,-12(fp)
    86a4:	10800017 	ldw	r2,0(r2)
    86a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    86ac:	e0bffc17 	ldw	r2,-16(fp)
    86b0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    86b4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    86b8:	10800217 	ldw	r2,8(r2)
    86bc:	1809883a 	mov	r4,r3
    86c0:	e17ffe17 	ldw	r5,-8(fp)
    86c4:	e1bfff17 	ldw	r6,-4(fp)
    86c8:	100f883a 	mov	r7,r2
    86cc:	0008cac0 	call	8cac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    86d0:	e037883a 	mov	sp,fp
    86d4:	dfc00117 	ldw	ra,4(sp)
    86d8:	df000017 	ldw	fp,0(sp)
    86dc:	dec00204 	addi	sp,sp,8
    86e0:	f800283a 	ret

000086e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    86e4:	defffa04 	addi	sp,sp,-24
    86e8:	dfc00515 	stw	ra,20(sp)
    86ec:	df000415 	stw	fp,16(sp)
    86f0:	df000404 	addi	fp,sp,16
    86f4:	e13ffd15 	stw	r4,-12(fp)
    86f8:	e17ffe15 	stw	r5,-8(fp)
    86fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8700:	e0bffd17 	ldw	r2,-12(fp)
    8704:	10800017 	ldw	r2,0(r2)
    8708:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    870c:	e0bffc17 	ldw	r2,-16(fp)
    8710:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8714:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8718:	10800217 	ldw	r2,8(r2)
    871c:	1809883a 	mov	r4,r3
    8720:	e17ffe17 	ldw	r5,-8(fp)
    8724:	e1bfff17 	ldw	r6,-4(fp)
    8728:	100f883a 	mov	r7,r2
    872c:	0008ec40 	call	8ec4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8730:	e037883a 	mov	sp,fp
    8734:	dfc00117 	ldw	ra,4(sp)
    8738:	df000017 	ldw	fp,0(sp)
    873c:	dec00204 	addi	sp,sp,8
    8740:	f800283a 	ret

00008744 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8744:	defffc04 	addi	sp,sp,-16
    8748:	dfc00315 	stw	ra,12(sp)
    874c:	df000215 	stw	fp,8(sp)
    8750:	df000204 	addi	fp,sp,8
    8754:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8758:	e0bfff17 	ldw	r2,-4(fp)
    875c:	10800017 	ldw	r2,0(r2)
    8760:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8764:	e0bffe17 	ldw	r2,-8(fp)
    8768:	10c00a04 	addi	r3,r2,40
    876c:	e0bfff17 	ldw	r2,-4(fp)
    8770:	10800217 	ldw	r2,8(r2)
    8774:	1809883a 	mov	r4,r3
    8778:	100b883a 	mov	r5,r2
    877c:	0008b500 	call	8b50 <altera_avalon_jtag_uart_close>
}
    8780:	e037883a 	mov	sp,fp
    8784:	dfc00117 	ldw	ra,4(sp)
    8788:	df000017 	ldw	fp,0(sp)
    878c:	dec00204 	addi	sp,sp,8
    8790:	f800283a 	ret

00008794 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8794:	defffa04 	addi	sp,sp,-24
    8798:	dfc00515 	stw	ra,20(sp)
    879c:	df000415 	stw	fp,16(sp)
    87a0:	df000404 	addi	fp,sp,16
    87a4:	e13ffd15 	stw	r4,-12(fp)
    87a8:	e17ffe15 	stw	r5,-8(fp)
    87ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    87b0:	e0bffd17 	ldw	r2,-12(fp)
    87b4:	10800017 	ldw	r2,0(r2)
    87b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    87bc:	e0bffc17 	ldw	r2,-16(fp)
    87c0:	10800a04 	addi	r2,r2,40
    87c4:	1009883a 	mov	r4,r2
    87c8:	e17ffe17 	ldw	r5,-8(fp)
    87cc:	e1bfff17 	ldw	r6,-4(fp)
    87d0:	0008bb80 	call	8bb8 <altera_avalon_jtag_uart_ioctl>
}
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    87e8:	defffa04 	addi	sp,sp,-24
    87ec:	dfc00515 	stw	ra,20(sp)
    87f0:	df000415 	stw	fp,16(sp)
    87f4:	df000404 	addi	fp,sp,16
    87f8:	e13ffd15 	stw	r4,-12(fp)
    87fc:	e17ffe15 	stw	r5,-8(fp)
    8800:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8804:	e0bffd17 	ldw	r2,-12(fp)
    8808:	00c00044 	movi	r3,1
    880c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    8810:	e0bffd17 	ldw	r2,-12(fp)
    8814:	10800017 	ldw	r2,0(r2)
    8818:	10800104 	addi	r2,r2,4
    881c:	e0fffd17 	ldw	r3,-12(fp)
    8820:	18c00817 	ldw	r3,32(r3)
    8824:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    8828:	e0fffe17 	ldw	r3,-8(fp)
    882c:	e0bfff17 	ldw	r2,-4(fp)
    8830:	d8000015 	stw	zero,0(sp)
    8834:	1809883a 	mov	r4,r3
    8838:	100b883a 	mov	r5,r2
    883c:	01800074 	movhi	r6,1
    8840:	31a22a04 	addi	r6,r6,-30552
    8844:	e1fffd17 	ldw	r7,-12(fp)
    8848:	0009e8c0 	call	9e8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    884c:	e0bffd17 	ldw	r2,-12(fp)
    8850:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    8854:	e0bffd17 	ldw	r2,-12(fp)
    8858:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    885c:	00800074 	movhi	r2,1
    8860:	10b59b04 	addi	r2,r2,-10644
    8864:	10800017 	ldw	r2,0(r2)
    8868:	1809883a 	mov	r4,r3
    886c:	100b883a 	mov	r5,r2
    8870:	01800074 	movhi	r6,1
    8874:	31a2ab04 	addi	r6,r6,-30036
    8878:	e1fffd17 	ldw	r7,-12(fp)
    887c:	00099ec0 	call	99ec <alt_alarm_start>
    8880:	1000040e 	bge	r2,zero,8894 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8884:	e0bffd17 	ldw	r2,-12(fp)
    8888:	00e00034 	movhi	r3,32768
    888c:	18ffffc4 	addi	r3,r3,-1
    8890:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8894:	e037883a 	mov	sp,fp
    8898:	dfc00117 	ldw	ra,4(sp)
    889c:	df000017 	ldw	fp,0(sp)
    88a0:	dec00204 	addi	sp,sp,8
    88a4:	f800283a 	ret

000088a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    88a8:	defff804 	addi	sp,sp,-32
    88ac:	df000715 	stw	fp,28(sp)
    88b0:	df000704 	addi	fp,sp,28
    88b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    88b8:	e0bfff17 	ldw	r2,-4(fp)
    88bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    88c0:	e0bffb17 	ldw	r2,-20(fp)
    88c4:	10800017 	ldw	r2,0(r2)
    88c8:	e0bffc15 	stw	r2,-16(fp)
    88cc:	00000106 	br	88d4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    88d0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    88d4:	e0bffc17 	ldw	r2,-16(fp)
    88d8:	10800104 	addi	r2,r2,4
    88dc:	10800037 	ldwio	r2,0(r2)
    88e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    88e4:	e0bffd17 	ldw	r2,-12(fp)
    88e8:	1080c00c 	andi	r2,r2,768
    88ec:	10006a26 	beq	r2,zero,8a98 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    88f0:	e0bffd17 	ldw	r2,-12(fp)
    88f4:	1080400c 	andi	r2,r2,256
    88f8:	10003326 	beq	r2,zero,89c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    88fc:	00800074 	movhi	r2,1
    8900:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8904:	e0bffb17 	ldw	r2,-20(fp)
    8908:	10800a17 	ldw	r2,40(r2)
    890c:	10800044 	addi	r2,r2,1
    8910:	1081ffcc 	andi	r2,r2,2047
    8914:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    8918:	e0bffb17 	ldw	r2,-20(fp)
    891c:	10c00b17 	ldw	r3,44(r2)
    8920:	e0bffe17 	ldw	r2,-8(fp)
    8924:	18801426 	beq	r3,r2,8978 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8928:	e0bffc17 	ldw	r2,-16(fp)
    892c:	10800037 	ldwio	r2,0(r2)
    8930:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8934:	e0bff917 	ldw	r2,-28(fp)
    8938:	10a0000c 	andi	r2,r2,32768
    893c:	10001026 	beq	r2,zero,8980 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8940:	e0bffb17 	ldw	r2,-20(fp)
    8944:	10800a17 	ldw	r2,40(r2)
    8948:	e0fff917 	ldw	r3,-28(fp)
    894c:	e13ffb17 	ldw	r4,-20(fp)
    8950:	2085883a 	add	r2,r4,r2
    8954:	10800e04 	addi	r2,r2,56
    8958:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    895c:	e0bffb17 	ldw	r2,-20(fp)
    8960:	10800a17 	ldw	r2,40(r2)
    8964:	10800044 	addi	r2,r2,1
    8968:	10c1ffcc 	andi	r3,r2,2047
    896c:	e0bffb17 	ldw	r2,-20(fp)
    8970:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8974:	003fe306 	br	8904 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    8978:	0001883a 	nop
    897c:	00000106 	br	8984 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    8980:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8984:	e0bff917 	ldw	r2,-28(fp)
    8988:	10bfffec 	andhi	r2,r2,65535
    898c:	10000e26 	beq	r2,zero,89c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8990:	e0bffb17 	ldw	r2,-20(fp)
    8994:	10c00817 	ldw	r3,32(r2)
    8998:	00bfff84 	movi	r2,-2
    899c:	1886703a 	and	r3,r3,r2
    89a0:	e0bffb17 	ldw	r2,-20(fp)
    89a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	10800104 	addi	r2,r2,4
    89b0:	e0fffb17 	ldw	r3,-20(fp)
    89b4:	18c00817 	ldw	r3,32(r3)
    89b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	10800104 	addi	r2,r2,4
    89c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    89c8:	e0bffd17 	ldw	r2,-12(fp)
    89cc:	1080800c 	andi	r2,r2,512
    89d0:	103fbf26 	beq	r2,zero,88d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    89d4:	e0bffd17 	ldw	r2,-12(fp)
    89d8:	1004d43a 	srli	r2,r2,16
    89dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    89e0:	00001406 	br	8a34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    89e4:	e0bffc17 	ldw	r2,-16(fp)
    89e8:	e0fffb17 	ldw	r3,-20(fp)
    89ec:	18c00d17 	ldw	r3,52(r3)
    89f0:	e13ffb17 	ldw	r4,-20(fp)
    89f4:	20c7883a 	add	r3,r4,r3
    89f8:	18c20e04 	addi	r3,r3,2104
    89fc:	18c00003 	ldbu	r3,0(r3)
    8a00:	18c03fcc 	andi	r3,r3,255
    8a04:	18c0201c 	xori	r3,r3,128
    8a08:	18ffe004 	addi	r3,r3,-128
    8a0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8a10:	e0bffb17 	ldw	r2,-20(fp)
    8a14:	10800d17 	ldw	r2,52(r2)
    8a18:	10800044 	addi	r2,r2,1
    8a1c:	10c1ffcc 	andi	r3,r2,2047
    8a20:	e0bffb17 	ldw	r2,-20(fp)
    8a24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8a28:	e0bffa17 	ldw	r2,-24(fp)
    8a2c:	10bfffc4 	addi	r2,r2,-1
    8a30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8a34:	e0bffa17 	ldw	r2,-24(fp)
    8a38:	10000526 	beq	r2,zero,8a50 <altera_avalon_jtag_uart_irq+0x1a8>
    8a3c:	e0bffb17 	ldw	r2,-20(fp)
    8a40:	10c00d17 	ldw	r3,52(r2)
    8a44:	e0bffb17 	ldw	r2,-20(fp)
    8a48:	10800c17 	ldw	r2,48(r2)
    8a4c:	18bfe51e 	bne	r3,r2,89e4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8a50:	e0bffa17 	ldw	r2,-24(fp)
    8a54:	103f9e26 	beq	r2,zero,88d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8a58:	e0bffb17 	ldw	r2,-20(fp)
    8a5c:	10c00817 	ldw	r3,32(r2)
    8a60:	00bfff44 	movi	r2,-3
    8a64:	1886703a 	and	r3,r3,r2
    8a68:	e0bffb17 	ldw	r2,-20(fp)
    8a6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8a70:	e0bffb17 	ldw	r2,-20(fp)
    8a74:	10800017 	ldw	r2,0(r2)
    8a78:	10800104 	addi	r2,r2,4
    8a7c:	e0fffb17 	ldw	r3,-20(fp)
    8a80:	18c00817 	ldw	r3,32(r3)
    8a84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8a88:	e0bffc17 	ldw	r2,-16(fp)
    8a8c:	10800104 	addi	r2,r2,4
    8a90:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8a94:	003f8e06 	br	88d0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    8a98:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    8a9c:	e037883a 	mov	sp,fp
    8aa0:	df000017 	ldw	fp,0(sp)
    8aa4:	dec00104 	addi	sp,sp,4
    8aa8:	f800283a 	ret

00008aac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8aac:	defffc04 	addi	sp,sp,-16
    8ab0:	df000315 	stw	fp,12(sp)
    8ab4:	df000304 	addi	fp,sp,12
    8ab8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8abc:	e0bfff17 	ldw	r2,-4(fp)
    8ac0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8ac4:	e0bffd17 	ldw	r2,-12(fp)
    8ac8:	10800017 	ldw	r2,0(r2)
    8acc:	10800104 	addi	r2,r2,4
    8ad0:	10800037 	ldwio	r2,0(r2)
    8ad4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8ad8:	e0bffe17 	ldw	r2,-8(fp)
    8adc:	1081000c 	andi	r2,r2,1024
    8ae0:	10000a26 	beq	r2,zero,8b0c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8ae4:	e0bffd17 	ldw	r2,-12(fp)
    8ae8:	10800017 	ldw	r2,0(r2)
    8aec:	10800104 	addi	r2,r2,4
    8af0:	e0fffd17 	ldw	r3,-12(fp)
    8af4:	18c00817 	ldw	r3,32(r3)
    8af8:	18c10014 	ori	r3,r3,1024
    8afc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    8b00:	e0bffd17 	ldw	r2,-12(fp)
    8b04:	10000915 	stw	zero,36(r2)
    8b08:	00000a06 	br	8b34 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8b0c:	e0bffd17 	ldw	r2,-12(fp)
    8b10:	10800917 	ldw	r2,36(r2)
    8b14:	00e00034 	movhi	r3,32768
    8b18:	18ffff04 	addi	r3,r3,-4
    8b1c:	18800536 	bltu	r3,r2,8b34 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    8b20:	e0bffd17 	ldw	r2,-12(fp)
    8b24:	10800917 	ldw	r2,36(r2)
    8b28:	10c00044 	addi	r3,r2,1
    8b2c:	e0bffd17 	ldw	r2,-12(fp)
    8b30:	10c00915 	stw	r3,36(r2)
    8b34:	00800074 	movhi	r2,1
    8b38:	10b59b04 	addi	r2,r2,-10644
    8b3c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8b40:	e037883a 	mov	sp,fp
    8b44:	df000017 	ldw	fp,0(sp)
    8b48:	dec00104 	addi	sp,sp,4
    8b4c:	f800283a 	ret

00008b50 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8b50:	defffd04 	addi	sp,sp,-12
    8b54:	df000215 	stw	fp,8(sp)
    8b58:	df000204 	addi	fp,sp,8
    8b5c:	e13ffe15 	stw	r4,-8(fp)
    8b60:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8b64:	00000506 	br	8b7c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    8b68:	e0bfff17 	ldw	r2,-4(fp)
    8b6c:	1090000c 	andi	r2,r2,16384
    8b70:	10000226 	beq	r2,zero,8b7c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    8b74:	00bffd44 	movi	r2,-11
    8b78:	00000b06 	br	8ba8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8b7c:	e0bffe17 	ldw	r2,-8(fp)
    8b80:	10c00d17 	ldw	r3,52(r2)
    8b84:	e0bffe17 	ldw	r2,-8(fp)
    8b88:	10800c17 	ldw	r2,48(r2)
    8b8c:	18800526 	beq	r3,r2,8ba4 <altera_avalon_jtag_uart_close+0x54>
    8b90:	e0bffe17 	ldw	r2,-8(fp)
    8b94:	10c00917 	ldw	r3,36(r2)
    8b98:	e0bffe17 	ldw	r2,-8(fp)
    8b9c:	10800117 	ldw	r2,4(r2)
    8ba0:	18bff136 	bltu	r3,r2,8b68 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8ba4:	0005883a 	mov	r2,zero
}
    8ba8:	e037883a 	mov	sp,fp
    8bac:	df000017 	ldw	fp,0(sp)
    8bb0:	dec00104 	addi	sp,sp,4
    8bb4:	f800283a 	ret

00008bb8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8bb8:	defffa04 	addi	sp,sp,-24
    8bbc:	df000515 	stw	fp,20(sp)
    8bc0:	df000504 	addi	fp,sp,20
    8bc4:	e13ffd15 	stw	r4,-12(fp)
    8bc8:	e17ffe15 	stw	r5,-8(fp)
    8bcc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    8bd0:	00bff9c4 	movi	r2,-25
    8bd4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    8bd8:	e0bffe17 	ldw	r2,-8(fp)
    8bdc:	10da8060 	cmpeqi	r3,r2,27137
    8be0:	1800031e 	bne	r3,zero,8bf0 <altera_avalon_jtag_uart_ioctl+0x38>
    8be4:	109a80a0 	cmpeqi	r2,r2,27138
    8be8:	1000181e 	bne	r2,zero,8c4c <altera_avalon_jtag_uart_ioctl+0x94>
    8bec:	00002606 	br	8c88 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8bf0:	e0bffd17 	ldw	r2,-12(fp)
    8bf4:	10c00117 	ldw	r3,4(r2)
    8bf8:	00a00034 	movhi	r2,32768
    8bfc:	10bfffc4 	addi	r2,r2,-1
    8c00:	18802226 	beq	r3,r2,8c8c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    8c04:	e0bfff17 	ldw	r2,-4(fp)
    8c08:	10800017 	ldw	r2,0(r2)
    8c0c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8c10:	e0bffc17 	ldw	r2,-16(fp)
    8c14:	10800090 	cmplti	r2,r2,2
    8c18:	1000061e 	bne	r2,zero,8c34 <altera_avalon_jtag_uart_ioctl+0x7c>
    8c1c:	e0fffc17 	ldw	r3,-16(fp)
    8c20:	00a00034 	movhi	r2,32768
    8c24:	10bfffc4 	addi	r2,r2,-1
    8c28:	18800226 	beq	r3,r2,8c34 <altera_avalon_jtag_uart_ioctl+0x7c>
    8c2c:	e0bffc17 	ldw	r2,-16(fp)
    8c30:	00000206 	br	8c3c <altera_avalon_jtag_uart_ioctl+0x84>
    8c34:	00a00034 	movhi	r2,32768
    8c38:	10bfff84 	addi	r2,r2,-2
    8c3c:	e0fffd17 	ldw	r3,-12(fp)
    8c40:	18800115 	stw	r2,4(r3)
      rc = 0;
    8c44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8c48:	00001006 	br	8c8c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8c4c:	e0bffd17 	ldw	r2,-12(fp)
    8c50:	10c00117 	ldw	r3,4(r2)
    8c54:	00a00034 	movhi	r2,32768
    8c58:	10bfffc4 	addi	r2,r2,-1
    8c5c:	18800d26 	beq	r3,r2,8c94 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8c60:	e0bffd17 	ldw	r2,-12(fp)
    8c64:	10c00917 	ldw	r3,36(r2)
    8c68:	e0bffd17 	ldw	r2,-12(fp)
    8c6c:	10800117 	ldw	r2,4(r2)
    8c70:	1885803a 	cmpltu	r2,r3,r2
    8c74:	10c03fcc 	andi	r3,r2,255
    8c78:	e0bfff17 	ldw	r2,-4(fp)
    8c7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    8c80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8c84:	00000306 	br	8c94 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    8c88:	00000306 	br	8c98 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    8c8c:	0001883a 	nop
    8c90:	00000106 	br	8c98 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    8c94:	0001883a 	nop

  default:
    break;
  }

  return rc;
    8c98:	e0bffb17 	ldw	r2,-20(fp)
}
    8c9c:	e037883a 	mov	sp,fp
    8ca0:	df000017 	ldw	fp,0(sp)
    8ca4:	dec00104 	addi	sp,sp,4
    8ca8:	f800283a 	ret

00008cac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8cac:	defff304 	addi	sp,sp,-52
    8cb0:	dfc00c15 	stw	ra,48(sp)
    8cb4:	df000b15 	stw	fp,44(sp)
    8cb8:	df000b04 	addi	fp,sp,44
    8cbc:	e13ffc15 	stw	r4,-16(fp)
    8cc0:	e17ffd15 	stw	r5,-12(fp)
    8cc4:	e1bffe15 	stw	r6,-8(fp)
    8cc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    8ccc:	e0bffd17 	ldw	r2,-12(fp)
    8cd0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8cd4:	00004706 	br	8df4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8cd8:	e0bffc17 	ldw	r2,-16(fp)
    8cdc:	10800a17 	ldw	r2,40(r2)
    8ce0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8ce4:	e0bffc17 	ldw	r2,-16(fp)
    8ce8:	10800b17 	ldw	r2,44(r2)
    8cec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    8cf0:	e0fff717 	ldw	r3,-36(fp)
    8cf4:	e0bff817 	ldw	r2,-32(fp)
    8cf8:	18800536 	bltu	r3,r2,8d10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8cfc:	e0fff717 	ldw	r3,-36(fp)
    8d00:	e0bff817 	ldw	r2,-32(fp)
    8d04:	1885c83a 	sub	r2,r3,r2
    8d08:	e0bff615 	stw	r2,-40(fp)
    8d0c:	00000406 	br	8d20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8d10:	00c20004 	movi	r3,2048
    8d14:	e0bff817 	ldw	r2,-32(fp)
    8d18:	1885c83a 	sub	r2,r3,r2
    8d1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    8d20:	e0bff617 	ldw	r2,-40(fp)
    8d24:	10001e26 	beq	r2,zero,8da0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    8d28:	e0fffe17 	ldw	r3,-8(fp)
    8d2c:	e0bff617 	ldw	r2,-40(fp)
    8d30:	1880022e 	bgeu	r3,r2,8d3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    8d34:	e0bffe17 	ldw	r2,-8(fp)
    8d38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8d3c:	e0bff817 	ldw	r2,-32(fp)
    8d40:	10800e04 	addi	r2,r2,56
    8d44:	e0fffc17 	ldw	r3,-16(fp)
    8d48:	1885883a 	add	r2,r3,r2
    8d4c:	e13ff517 	ldw	r4,-44(fp)
    8d50:	100b883a 	mov	r5,r2
    8d54:	e1bff617 	ldw	r6,-40(fp)
    8d58:	000aa780 	call	aa78 <memcpy>
      ptr   += n;
    8d5c:	e0fff517 	ldw	r3,-44(fp)
    8d60:	e0bff617 	ldw	r2,-40(fp)
    8d64:	1885883a 	add	r2,r3,r2
    8d68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    8d6c:	e0fffe17 	ldw	r3,-8(fp)
    8d70:	e0bff617 	ldw	r2,-40(fp)
    8d74:	1885c83a 	sub	r2,r3,r2
    8d78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8d7c:	e0fff817 	ldw	r3,-32(fp)
    8d80:	e0bff617 	ldw	r2,-40(fp)
    8d84:	1885883a 	add	r2,r3,r2
    8d88:	10c1ffcc 	andi	r3,r2,2047
    8d8c:	e0bffc17 	ldw	r2,-16(fp)
    8d90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8d94:	e0bffe17 	ldw	r2,-8(fp)
    8d98:	00bfcf16 	blt	zero,r2,8cd8 <altera_avalon_jtag_uart_read+0x2c>
    8d9c:	00000106 	br	8da4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    8da0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    8da4:	e0fff517 	ldw	r3,-44(fp)
    8da8:	e0bffd17 	ldw	r2,-12(fp)
    8dac:	1880141e 	bne	r3,r2,8e00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8db0:	e0bfff17 	ldw	r2,-4(fp)
    8db4:	1090000c 	andi	r2,r2,16384
    8db8:	1000131e 	bne	r2,zero,8e08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8dbc:	0001883a 	nop
    8dc0:	e0bffc17 	ldw	r2,-16(fp)
    8dc4:	10c00a17 	ldw	r3,40(r2)
    8dc8:	e0bff717 	ldw	r2,-36(fp)
    8dcc:	1880051e 	bne	r3,r2,8de4 <altera_avalon_jtag_uart_read+0x138>
    8dd0:	e0bffc17 	ldw	r2,-16(fp)
    8dd4:	10c00917 	ldw	r3,36(r2)
    8dd8:	e0bffc17 	ldw	r2,-16(fp)
    8ddc:	10800117 	ldw	r2,4(r2)
    8de0:	18bff736 	bltu	r3,r2,8dc0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8de4:	e0bffc17 	ldw	r2,-16(fp)
    8de8:	10c00a17 	ldw	r3,40(r2)
    8dec:	e0bff717 	ldw	r2,-36(fp)
    8df0:	18800726 	beq	r3,r2,8e10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8df4:	e0bffe17 	ldw	r2,-8(fp)
    8df8:	00bfb716 	blt	zero,r2,8cd8 <altera_avalon_jtag_uart_read+0x2c>
    8dfc:	00000506 	br	8e14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    8e00:	0001883a 	nop
    8e04:	00000306 	br	8e14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    8e08:	0001883a 	nop
    8e0c:	00000106 	br	8e14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    8e10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8e14:	e0fff517 	ldw	r3,-44(fp)
    8e18:	e0bffd17 	ldw	r2,-12(fp)
    8e1c:	18801726 	beq	r3,r2,8e7c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e20:	0005303a 	rdctl	r2,status
    8e24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e28:	e0fffa17 	ldw	r3,-24(fp)
    8e2c:	00bfff84 	movi	r2,-2
    8e30:	1884703a 	and	r2,r3,r2
    8e34:	1001703a 	wrctl	status,r2
  
  return context;
    8e38:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8e3c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8e40:	e0bffc17 	ldw	r2,-16(fp)
    8e44:	10800817 	ldw	r2,32(r2)
    8e48:	10c00054 	ori	r3,r2,1
    8e4c:	e0bffc17 	ldw	r2,-16(fp)
    8e50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8e54:	e0bffc17 	ldw	r2,-16(fp)
    8e58:	10800017 	ldw	r2,0(r2)
    8e5c:	10800104 	addi	r2,r2,4
    8e60:	e0fffc17 	ldw	r3,-16(fp)
    8e64:	18c00817 	ldw	r3,32(r3)
    8e68:	10c00035 	stwio	r3,0(r2)
    8e6c:	e0bff917 	ldw	r2,-28(fp)
    8e70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e74:	e0bffb17 	ldw	r2,-20(fp)
    8e78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8e7c:	e0fff517 	ldw	r3,-44(fp)
    8e80:	e0bffd17 	ldw	r2,-12(fp)
    8e84:	18800426 	beq	r3,r2,8e98 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    8e88:	e0fff517 	ldw	r3,-44(fp)
    8e8c:	e0bffd17 	ldw	r2,-12(fp)
    8e90:	1885c83a 	sub	r2,r3,r2
    8e94:	00000606 	br	8eb0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    8e98:	e0bfff17 	ldw	r2,-4(fp)
    8e9c:	1090000c 	andi	r2,r2,16384
    8ea0:	10000226 	beq	r2,zero,8eac <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    8ea4:	00bffd44 	movi	r2,-11
    8ea8:	00000106 	br	8eb0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    8eac:	00bffec4 	movi	r2,-5
}
    8eb0:	e037883a 	mov	sp,fp
    8eb4:	dfc00117 	ldw	ra,4(sp)
    8eb8:	df000017 	ldw	fp,0(sp)
    8ebc:	dec00204 	addi	sp,sp,8
    8ec0:	f800283a 	ret

00008ec4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8ec4:	defff304 	addi	sp,sp,-52
    8ec8:	dfc00c15 	stw	ra,48(sp)
    8ecc:	df000b15 	stw	fp,44(sp)
    8ed0:	df000b04 	addi	fp,sp,44
    8ed4:	e13ffc15 	stw	r4,-16(fp)
    8ed8:	e17ffd15 	stw	r5,-12(fp)
    8edc:	e1bffe15 	stw	r6,-8(fp)
    8ee0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    8ee4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    8ee8:	e0bffd17 	ldw	r2,-12(fp)
    8eec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8ef0:	00003706 	br	8fd0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    8ef4:	e0bffc17 	ldw	r2,-16(fp)
    8ef8:	10800c17 	ldw	r2,48(r2)
    8efc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    8f00:	e0bffc17 	ldw	r2,-16(fp)
    8f04:	10800d17 	ldw	r2,52(r2)
    8f08:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    8f0c:	e0fff817 	ldw	r3,-32(fp)
    8f10:	e0bff517 	ldw	r2,-44(fp)
    8f14:	1880062e 	bgeu	r3,r2,8f30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    8f18:	e0fff517 	ldw	r3,-44(fp)
    8f1c:	e0bff817 	ldw	r2,-32(fp)
    8f20:	1885c83a 	sub	r2,r3,r2
    8f24:	10bfffc4 	addi	r2,r2,-1
    8f28:	e0bff615 	stw	r2,-40(fp)
    8f2c:	00000b06 	br	8f5c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    8f30:	e0bff517 	ldw	r2,-44(fp)
    8f34:	10000526 	beq	r2,zero,8f4c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    8f38:	00c20004 	movi	r3,2048
    8f3c:	e0bff817 	ldw	r2,-32(fp)
    8f40:	1885c83a 	sub	r2,r3,r2
    8f44:	e0bff615 	stw	r2,-40(fp)
    8f48:	00000406 	br	8f5c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    8f4c:	00c1ffc4 	movi	r3,2047
    8f50:	e0bff817 	ldw	r2,-32(fp)
    8f54:	1885c83a 	sub	r2,r3,r2
    8f58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    8f5c:	e0bff617 	ldw	r2,-40(fp)
    8f60:	10001e26 	beq	r2,zero,8fdc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    8f64:	e0fffe17 	ldw	r3,-8(fp)
    8f68:	e0bff617 	ldw	r2,-40(fp)
    8f6c:	1880022e 	bgeu	r3,r2,8f78 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    8f70:	e0bffe17 	ldw	r2,-8(fp)
    8f74:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    8f78:	e0bff817 	ldw	r2,-32(fp)
    8f7c:	10820e04 	addi	r2,r2,2104
    8f80:	e0fffc17 	ldw	r3,-16(fp)
    8f84:	1885883a 	add	r2,r3,r2
    8f88:	1009883a 	mov	r4,r2
    8f8c:	e17ffd17 	ldw	r5,-12(fp)
    8f90:	e1bff617 	ldw	r6,-40(fp)
    8f94:	000aa780 	call	aa78 <memcpy>
      ptr   += n;
    8f98:	e0fffd17 	ldw	r3,-12(fp)
    8f9c:	e0bff617 	ldw	r2,-40(fp)
    8fa0:	1885883a 	add	r2,r3,r2
    8fa4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    8fa8:	e0fffe17 	ldw	r3,-8(fp)
    8fac:	e0bff617 	ldw	r2,-40(fp)
    8fb0:	1885c83a 	sub	r2,r3,r2
    8fb4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8fb8:	e0fff817 	ldw	r3,-32(fp)
    8fbc:	e0bff617 	ldw	r2,-40(fp)
    8fc0:	1885883a 	add	r2,r3,r2
    8fc4:	10c1ffcc 	andi	r3,r2,2047
    8fc8:	e0bffc17 	ldw	r2,-16(fp)
    8fcc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8fd0:	e0bffe17 	ldw	r2,-8(fp)
    8fd4:	00bfc716 	blt	zero,r2,8ef4 <altera_avalon_jtag_uart_write+0x30>
    8fd8:	00000106 	br	8fe0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    8fdc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fe0:	0005303a 	rdctl	r2,status
    8fe4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fe8:	e0fffa17 	ldw	r3,-24(fp)
    8fec:	00bfff84 	movi	r2,-2
    8ff0:	1884703a 	and	r2,r3,r2
    8ff4:	1001703a 	wrctl	status,r2
  
  return context;
    8ff8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    8ffc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9000:	e0bffc17 	ldw	r2,-16(fp)
    9004:	10800817 	ldw	r2,32(r2)
    9008:	10c00094 	ori	r3,r2,2
    900c:	e0bffc17 	ldw	r2,-16(fp)
    9010:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9014:	e0bffc17 	ldw	r2,-16(fp)
    9018:	10800017 	ldw	r2,0(r2)
    901c:	10800104 	addi	r2,r2,4
    9020:	e0fffc17 	ldw	r3,-16(fp)
    9024:	18c00817 	ldw	r3,32(r3)
    9028:	10c00035 	stwio	r3,0(r2)
    902c:	e0bff917 	ldw	r2,-28(fp)
    9030:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9034:	e0bffb17 	ldw	r2,-20(fp)
    9038:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    903c:	e0bffe17 	ldw	r2,-8(fp)
    9040:	0080110e 	bge	zero,r2,9088 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    9044:	e0bfff17 	ldw	r2,-4(fp)
    9048:	1090000c 	andi	r2,r2,16384
    904c:	1000111e 	bne	r2,zero,9094 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    9050:	0001883a 	nop
    9054:	e0bffc17 	ldw	r2,-16(fp)
    9058:	10c00d17 	ldw	r3,52(r2)
    905c:	e0bff517 	ldw	r2,-44(fp)
    9060:	1880051e 	bne	r3,r2,9078 <altera_avalon_jtag_uart_write+0x1b4>
    9064:	e0bffc17 	ldw	r2,-16(fp)
    9068:	10c00917 	ldw	r3,36(r2)
    906c:	e0bffc17 	ldw	r2,-16(fp)
    9070:	10800117 	ldw	r2,4(r2)
    9074:	18bff736 	bltu	r3,r2,9054 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    9078:	e0bffc17 	ldw	r2,-16(fp)
    907c:	10c00d17 	ldw	r3,52(r2)
    9080:	e0bff517 	ldw	r2,-44(fp)
    9084:	18800526 	beq	r3,r2,909c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    9088:	e0bffe17 	ldw	r2,-8(fp)
    908c:	00bfd016 	blt	zero,r2,8fd0 <altera_avalon_jtag_uart_write+0x10c>
    9090:	00000306 	br	90a0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    9094:	0001883a 	nop
    9098:	00000106 	br	90a0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    909c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    90a0:	e0fffd17 	ldw	r3,-12(fp)
    90a4:	e0bff717 	ldw	r2,-36(fp)
    90a8:	18800426 	beq	r3,r2,90bc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    90ac:	e0fffd17 	ldw	r3,-12(fp)
    90b0:	e0bff717 	ldw	r2,-36(fp)
    90b4:	1885c83a 	sub	r2,r3,r2
    90b8:	00000606 	br	90d4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    90bc:	e0bfff17 	ldw	r2,-4(fp)
    90c0:	1090000c 	andi	r2,r2,16384
    90c4:	10000226 	beq	r2,zero,90d0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    90c8:	00bffd44 	movi	r2,-11
    90cc:	00000106 	br	90d4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    90d0:	00bffec4 	movi	r2,-5
}
    90d4:	e037883a 	mov	sp,fp
    90d8:	dfc00117 	ldw	ra,4(sp)
    90dc:	df000017 	ldw	fp,0(sp)
    90e0:	dec00204 	addi	sp,sp,8
    90e4:	f800283a 	ret

000090e8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    90e8:	defffa04 	addi	sp,sp,-24
    90ec:	dfc00515 	stw	ra,20(sp)
    90f0:	df000415 	stw	fp,16(sp)
    90f4:	df000404 	addi	fp,sp,16
    90f8:	e13ffd15 	stw	r4,-12(fp)
    90fc:	e17ffe15 	stw	r5,-8(fp)
    9100:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    9104:	e0bffd17 	ldw	r2,-12(fp)
    9108:	10800017 	ldw	r2,0(r2)
    910c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    9110:	e0bffc17 	ldw	r2,-16(fp)
    9114:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9118:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    911c:	10800217 	ldw	r2,8(r2)
    9120:	1809883a 	mov	r4,r3
    9124:	e17ffe17 	ldw	r5,-8(fp)
    9128:	e1bfff17 	ldw	r6,-4(fp)
    912c:	100f883a 	mov	r7,r2
    9130:	00095f00 	call	95f0 <altera_avalon_uart_read>
      fd->fd_flags);
}
    9134:	e037883a 	mov	sp,fp
    9138:	dfc00117 	ldw	ra,4(sp)
    913c:	df000017 	ldw	fp,0(sp)
    9140:	dec00204 	addi	sp,sp,8
    9144:	f800283a 	ret

00009148 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9148:	defffa04 	addi	sp,sp,-24
    914c:	dfc00515 	stw	ra,20(sp)
    9150:	df000415 	stw	fp,16(sp)
    9154:	df000404 	addi	fp,sp,16
    9158:	e13ffd15 	stw	r4,-12(fp)
    915c:	e17ffe15 	stw	r5,-8(fp)
    9160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    9164:	e0bffd17 	ldw	r2,-12(fp)
    9168:	10800017 	ldw	r2,0(r2)
    916c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    9170:	e0bffc17 	ldw	r2,-16(fp)
    9174:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9178:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    917c:	10800217 	ldw	r2,8(r2)
    9180:	1809883a 	mov	r4,r3
    9184:	e17ffe17 	ldw	r5,-8(fp)
    9188:	e1bfff17 	ldw	r6,-4(fp)
    918c:	100f883a 	mov	r7,r2
    9190:	00098440 	call	9844 <altera_avalon_uart_write>
      fd->fd_flags);
}
    9194:	e037883a 	mov	sp,fp
    9198:	dfc00117 	ldw	ra,4(sp)
    919c:	df000017 	ldw	fp,0(sp)
    91a0:	dec00204 	addi	sp,sp,8
    91a4:	f800283a 	ret

000091a8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    91a8:	defffc04 	addi	sp,sp,-16
    91ac:	dfc00315 	stw	ra,12(sp)
    91b0:	df000215 	stw	fp,8(sp)
    91b4:	df000204 	addi	fp,sp,8
    91b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    91bc:	e0bfff17 	ldw	r2,-4(fp)
    91c0:	10800017 	ldw	r2,0(r2)
    91c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    91c8:	e0bffe17 	ldw	r2,-8(fp)
    91cc:	10c00a04 	addi	r3,r2,40
    91d0:	e0bfff17 	ldw	r2,-4(fp)
    91d4:	10800217 	ldw	r2,8(r2)
    91d8:	1809883a 	mov	r4,r3
    91dc:	100b883a 	mov	r5,r2
    91e0:	000954c0 	call	954c <altera_avalon_uart_close>
}
    91e4:	e037883a 	mov	sp,fp
    91e8:	dfc00117 	ldw	ra,4(sp)
    91ec:	df000017 	ldw	fp,0(sp)
    91f0:	dec00204 	addi	sp,sp,8
    91f4:	f800283a 	ret

000091f8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    91f8:	defff804 	addi	sp,sp,-32
    91fc:	dfc00715 	stw	ra,28(sp)
    9200:	df000615 	stw	fp,24(sp)
    9204:	df000604 	addi	fp,sp,24
    9208:	e13ffd15 	stw	r4,-12(fp)
    920c:	e17ffe15 	stw	r5,-8(fp)
    9210:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    9214:	e0bffd17 	ldw	r2,-12(fp)
    9218:	10800017 	ldw	r2,0(r2)
    921c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    9220:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    9224:	1000041e 	bne	r2,zero,9238 <altera_avalon_uart_init+0x40>
    9228:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    922c:	1000021e 	bne	r2,zero,9238 <altera_avalon_uart_init+0x40>
    9230:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    9234:	10000226 	beq	r2,zero,9240 <altera_avalon_uart_init+0x48>
    9238:	00800044 	movi	r2,1
    923c:	00000106 	br	9244 <altera_avalon_uart_init+0x4c>
    9240:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    9244:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    9248:	e0bffc17 	ldw	r2,-16(fp)
    924c:	10000f1e 	bne	r2,zero,928c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    9250:	e0bffd17 	ldw	r2,-12(fp)
    9254:	00c32004 	movi	r3,3200
    9258:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    925c:	e0bffb17 	ldw	r2,-20(fp)
    9260:	10800304 	addi	r2,r2,12
    9264:	e0fffd17 	ldw	r3,-12(fp)
    9268:	18c00117 	ldw	r3,4(r3)
    926c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    9270:	d8000015 	stw	zero,0(sp)
    9274:	e13ffe17 	ldw	r4,-8(fp)
    9278:	e17fff17 	ldw	r5,-4(fp)
    927c:	01800074 	movhi	r6,1
    9280:	31a4a804 	addi	r6,r6,-28000
    9284:	e1fffd17 	ldw	r7,-12(fp)
    9288:	0009e8c0 	call	9e8c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    928c:	e037883a 	mov	sp,fp
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	df000017 	ldw	fp,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    92a0:	defffa04 	addi	sp,sp,-24
    92a4:	dfc00515 	stw	ra,20(sp)
    92a8:	df000415 	stw	fp,16(sp)
    92ac:	df000404 	addi	fp,sp,16
    92b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    92b4:	e0bfff17 	ldw	r2,-4(fp)
    92b8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	10800017 	ldw	r2,0(r2)
    92c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    92c8:	e0bffd17 	ldw	r2,-12(fp)
    92cc:	10800204 	addi	r2,r2,8
    92d0:	10800037 	ldwio	r2,0(r2)
    92d4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    92d8:	e0bffd17 	ldw	r2,-12(fp)
    92dc:	10800204 	addi	r2,r2,8
    92e0:	0007883a 	mov	r3,zero
    92e4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    92e8:	e0bffd17 	ldw	r2,-12(fp)
    92ec:	10800204 	addi	r2,r2,8
    92f0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    92f4:	e0bffe17 	ldw	r2,-8(fp)
    92f8:	1080200c 	andi	r2,r2,128
    92fc:	10000326 	beq	r2,zero,930c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    9300:	e13ffc17 	ldw	r4,-16(fp)
    9304:	e17ffe17 	ldw	r5,-8(fp)
    9308:	00093380 	call	9338 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    930c:	e0bffe17 	ldw	r2,-8(fp)
    9310:	1081100c 	andi	r2,r2,1088
    9314:	10000326 	beq	r2,zero,9324 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    9318:	e13ffc17 	ldw	r4,-16(fp)
    931c:	e17ffe17 	ldw	r5,-8(fp)
    9320:	00094100 	call	9410 <altera_avalon_uart_txirq>
  }
  

}
    9324:	e037883a 	mov	sp,fp
    9328:	dfc00117 	ldw	ra,4(sp)
    932c:	df000017 	ldw	fp,0(sp)
    9330:	dec00204 	addi	sp,sp,8
    9334:	f800283a 	ret

00009338 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    9338:	defffc04 	addi	sp,sp,-16
    933c:	df000315 	stw	fp,12(sp)
    9340:	df000304 	addi	fp,sp,12
    9344:	e13ffe15 	stw	r4,-8(fp)
    9348:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    934c:	e0bfff17 	ldw	r2,-4(fp)
    9350:	108000cc 	andi	r2,r2,3
    9354:	1000291e 	bne	r2,zero,93fc <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    9358:	e0bffe17 	ldw	r2,-8(fp)
    935c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    9360:	e0bffe17 	ldw	r2,-8(fp)
    9364:	10800317 	ldw	r2,12(r2)
    9368:	10800044 	addi	r2,r2,1
    936c:	10800fcc 	andi	r2,r2,63
    9370:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9374:	e0bffe17 	ldw	r2,-8(fp)
    9378:	10800317 	ldw	r2,12(r2)
    937c:	e0fffe17 	ldw	r3,-8(fp)
    9380:	18c00017 	ldw	r3,0(r3)
    9384:	18c00037 	ldwio	r3,0(r3)
    9388:	e13ffe17 	ldw	r4,-8(fp)
    938c:	2085883a 	add	r2,r4,r2
    9390:	10800704 	addi	r2,r2,28
    9394:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    9398:	e0bffe17 	ldw	r2,-8(fp)
    939c:	e0fffd17 	ldw	r3,-12(fp)
    93a0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    93a4:	e0bffe17 	ldw	r2,-8(fp)
    93a8:	10800317 	ldw	r2,12(r2)
    93ac:	10800044 	addi	r2,r2,1
    93b0:	10800fcc 	andi	r2,r2,63
    93b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    93b8:	e0bffe17 	ldw	r2,-8(fp)
    93bc:	10c00217 	ldw	r3,8(r2)
    93c0:	e0bffd17 	ldw	r2,-12(fp)
    93c4:	18800e1e 	bne	r3,r2,9400 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    93c8:	e0bffe17 	ldw	r2,-8(fp)
    93cc:	10c00117 	ldw	r3,4(r2)
    93d0:	00bfdfc4 	movi	r2,-129
    93d4:	1886703a 	and	r3,r3,r2
    93d8:	e0bffe17 	ldw	r2,-8(fp)
    93dc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    93e0:	e0bffe17 	ldw	r2,-8(fp)
    93e4:	10800017 	ldw	r2,0(r2)
    93e8:	10800304 	addi	r2,r2,12
    93ec:	e0fffe17 	ldw	r3,-8(fp)
    93f0:	18c00117 	ldw	r3,4(r3)
    93f4:	10c00035 	stwio	r3,0(r2)
    93f8:	00000106 	br	9400 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    93fc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
    9400:	e037883a 	mov	sp,fp
    9404:	df000017 	ldw	fp,0(sp)
    9408:	dec00104 	addi	sp,sp,4
    940c:	f800283a 	ret

00009410 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    9410:	defffd04 	addi	sp,sp,-12
    9414:	df000215 	stw	fp,8(sp)
    9418:	df000204 	addi	fp,sp,8
    941c:	e13ffe15 	stw	r4,-8(fp)
    9420:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    9424:	e0bffe17 	ldw	r2,-8(fp)
    9428:	10c00417 	ldw	r3,16(r2)
    942c:	e0bffe17 	ldw	r2,-8(fp)
    9430:	10800517 	ldw	r2,20(r2)
    9434:	18803026 	beq	r3,r2,94f8 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    9438:	e0bffe17 	ldw	r2,-8(fp)
    943c:	10800617 	ldw	r2,24(r2)
    9440:	1080008c 	andi	r2,r2,2
    9444:	10000326 	beq	r2,zero,9454 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    9448:	e0bfff17 	ldw	r2,-4(fp)
    944c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    9450:	10001b26 	beq	r2,zero,94c0 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    9454:	e0bffe17 	ldw	r2,-8(fp)
    9458:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    945c:	e0bffe17 	ldw	r2,-8(fp)
    9460:	10800017 	ldw	r2,0(r2)
    9464:	10800104 	addi	r2,r2,4
    9468:	e0fffe17 	ldw	r3,-8(fp)
    946c:	18c00417 	ldw	r3,16(r3)
    9470:	e13ffe17 	ldw	r4,-8(fp)
    9474:	20c7883a 	add	r3,r4,r3
    9478:	18c01704 	addi	r3,r3,92
    947c:	18c00003 	ldbu	r3,0(r3)
    9480:	18c03fcc 	andi	r3,r3,255
    9484:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    9488:	e0bffe17 	ldw	r2,-8(fp)
    948c:	10800417 	ldw	r2,16(r2)
    9490:	10800044 	addi	r2,r2,1
    9494:	e0fffe17 	ldw	r3,-8(fp)
    9498:	18800415 	stw	r2,16(r3)
    949c:	10c00fcc 	andi	r3,r2,63
    94a0:	e0bffe17 	ldw	r2,-8(fp)
    94a4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    94a8:	e0bffe17 	ldw	r2,-8(fp)
    94ac:	10800117 	ldw	r2,4(r2)
    94b0:	10c01014 	ori	r3,r2,64
    94b4:	e0bffe17 	ldw	r2,-8(fp)
    94b8:	10c00115 	stw	r3,4(r2)
    94bc:	00000e06 	br	94f8 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    94c0:	e0bffe17 	ldw	r2,-8(fp)
    94c4:	10800017 	ldw	r2,0(r2)
    94c8:	10800204 	addi	r2,r2,8
    94cc:	10800037 	ldwio	r2,0(r2)
    94d0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    94d4:	e0bfff17 	ldw	r2,-4(fp)
    94d8:	1082000c 	andi	r2,r2,2048
    94dc:	1000061e 	bne	r2,zero,94f8 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    94e0:	e0bffe17 	ldw	r2,-8(fp)
    94e4:	10c00117 	ldw	r3,4(r2)
    94e8:	00bfefc4 	movi	r2,-65
    94ec:	1886703a 	and	r3,r3,r2
    94f0:	e0bffe17 	ldw	r2,-8(fp)
    94f4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    94f8:	e0bffe17 	ldw	r2,-8(fp)
    94fc:	10c00417 	ldw	r3,16(r2)
    9500:	e0bffe17 	ldw	r2,-8(fp)
    9504:	10800517 	ldw	r2,20(r2)
    9508:	1880061e 	bne	r3,r2,9524 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    950c:	e0bffe17 	ldw	r2,-8(fp)
    9510:	10c00117 	ldw	r3,4(r2)
    9514:	00beefc4 	movi	r2,-1089
    9518:	1886703a 	and	r3,r3,r2
    951c:	e0bffe17 	ldw	r2,-8(fp)
    9520:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9524:	e0bffe17 	ldw	r2,-8(fp)
    9528:	10800017 	ldw	r2,0(r2)
    952c:	10800304 	addi	r2,r2,12
    9530:	e0fffe17 	ldw	r3,-8(fp)
    9534:	18c00117 	ldw	r3,4(r3)
    9538:	10c00035 	stwio	r3,0(r2)
}
    953c:	e037883a 	mov	sp,fp
    9540:	df000017 	ldw	fp,0(sp)
    9544:	dec00104 	addi	sp,sp,4
    9548:	f800283a 	ret

0000954c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    954c:	defffd04 	addi	sp,sp,-12
    9550:	df000215 	stw	fp,8(sp)
    9554:	df000204 	addi	fp,sp,8
    9558:	e13ffe15 	stw	r4,-8(fp)
    955c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    9560:	00000506 	br	9578 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    9564:	e0bfff17 	ldw	r2,-4(fp)
    9568:	1090000c 	andi	r2,r2,16384
    956c:	10000226 	beq	r2,zero,9578 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    9570:	00bffd44 	movi	r2,-11
    9574:	00000606 	br	9590 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    9578:	e0bffe17 	ldw	r2,-8(fp)
    957c:	10c00417 	ldw	r3,16(r2)
    9580:	e0bffe17 	ldw	r2,-8(fp)
    9584:	10800517 	ldw	r2,20(r2)
    9588:	18bff61e 	bne	r3,r2,9564 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    958c:	0005883a 	mov	r2,zero
}
    9590:	e037883a 	mov	sp,fp
    9594:	df000017 	ldw	fp,0(sp)
    9598:	dec00104 	addi	sp,sp,4
    959c:	f800283a 	ret

000095a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95a0:	defffe04 	addi	sp,sp,-8
    95a4:	dfc00115 	stw	ra,4(sp)
    95a8:	df000015 	stw	fp,0(sp)
    95ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    95b0:	00800074 	movhi	r2,1
    95b4:	10b09904 	addi	r2,r2,-15772
    95b8:	10800017 	ldw	r2,0(r2)
    95bc:	10000526 	beq	r2,zero,95d4 <alt_get_errno+0x34>
    95c0:	00800074 	movhi	r2,1
    95c4:	10b09904 	addi	r2,r2,-15772
    95c8:	10800017 	ldw	r2,0(r2)
    95cc:	103ee83a 	callr	r2
    95d0:	00000206 	br	95dc <alt_get_errno+0x3c>
    95d4:	00800074 	movhi	r2,1
    95d8:	10b59d04 	addi	r2,r2,-10636
}
    95dc:	e037883a 	mov	sp,fp
    95e0:	dfc00117 	ldw	ra,4(sp)
    95e4:	df000017 	ldw	fp,0(sp)
    95e8:	dec00204 	addi	sp,sp,8
    95ec:	f800283a 	ret

000095f0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    95f0:	defff104 	addi	sp,sp,-60
    95f4:	dfc00e15 	stw	ra,56(sp)
    95f8:	df000d15 	stw	fp,52(sp)
    95fc:	df000d04 	addi	fp,sp,52
    9600:	e13ffc15 	stw	r4,-16(fp)
    9604:	e17ffd15 	stw	r5,-12(fp)
    9608:	e1bffe15 	stw	r6,-8(fp)
    960c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    9610:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
    9614:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    9618:	e0bfff17 	ldw	r2,-4(fp)
    961c:	1090000c 	andi	r2,r2,16384
    9620:	1005003a 	cmpeq	r2,r2,zero
    9624:	10803fcc 	andi	r2,r2,255
    9628:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    962c:	e0bffc17 	ldw	r2,-16(fp)
    9630:	10800217 	ldw	r2,8(r2)
    9634:	10800044 	addi	r2,r2,1
    9638:	10800fcc 	andi	r2,r2,63
    963c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    9640:	00001906 	br	96a8 <altera_avalon_uart_read+0xb8>
    {
      count++;
    9644:	e0bff417 	ldw	r2,-48(fp)
    9648:	10800044 	addi	r2,r2,1
    964c:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    9650:	e0bffc17 	ldw	r2,-16(fp)
    9654:	10800217 	ldw	r2,8(r2)
    9658:	e0fffc17 	ldw	r3,-16(fp)
    965c:	1885883a 	add	r2,r3,r2
    9660:	10800704 	addi	r2,r2,28
    9664:	10800003 	ldbu	r2,0(r2)
    9668:	1007883a 	mov	r3,r2
    966c:	e0bffd17 	ldw	r2,-12(fp)
    9670:	10c00005 	stb	r3,0(r2)
    9674:	e0bffd17 	ldw	r2,-12(fp)
    9678:	10800044 	addi	r2,r2,1
    967c:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    9680:	e0bffc17 	ldw	r2,-16(fp)
    9684:	10800217 	ldw	r2,8(r2)
    9688:	10c00044 	addi	r3,r2,1
    968c:	e0bffc17 	ldw	r2,-16(fp)
    9690:	10c00215 	stw	r3,8(r2)
    9694:	e0bffc17 	ldw	r2,-16(fp)
    9698:	10800217 	ldw	r2,8(r2)
    969c:	10c00fcc 	andi	r3,r2,63
    96a0:	e0bffc17 	ldw	r2,-16(fp)
    96a4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    96a8:	e0fff417 	ldw	r3,-48(fp)
    96ac:	e0bffe17 	ldw	r2,-8(fp)
    96b0:	1880050e 	bge	r3,r2,96c8 <altera_avalon_uart_read+0xd8>
    96b4:	e0bffc17 	ldw	r2,-16(fp)
    96b8:	10c00217 	ldw	r3,8(r2)
    96bc:	e0bffc17 	ldw	r2,-16(fp)
    96c0:	10800317 	ldw	r2,12(r2)
    96c4:	18bfdf1e 	bne	r3,r2,9644 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    96c8:	e0bff417 	ldw	r2,-48(fp)
    96cc:	1000241e 	bne	r2,zero,9760 <altera_avalon_uart_read+0x170>
    96d0:	e0bffc17 	ldw	r2,-16(fp)
    96d4:	10c00217 	ldw	r3,8(r2)
    96d8:	e0bffc17 	ldw	r2,-16(fp)
    96dc:	10800317 	ldw	r2,12(r2)
    96e0:	18801f1e 	bne	r3,r2,9760 <altera_avalon_uart_read+0x170>
    {
      if (!block)
    96e4:	e0bff517 	ldw	r2,-44(fp)
    96e8:	1000061e 	bne	r2,zero,9704 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    96ec:	00095a00 	call	95a0 <alt_get_errno>
    96f0:	00c002c4 	movi	r3,11
    96f4:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    96f8:	00800044 	movi	r2,1
    96fc:	e0bff305 	stb	r2,-52(fp)
        break;
    9700:	00001b06 	br	9770 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9704:	0005303a 	rdctl	r2,status
    9708:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    970c:	e0fff817 	ldw	r3,-32(fp)
    9710:	00bfff84 	movi	r2,-2
    9714:	1884703a 	and	r2,r3,r2
    9718:	1001703a 	wrctl	status,r2
  
  return context;
    971c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    9720:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    9724:	e0bffc17 	ldw	r2,-16(fp)
    9728:	10800117 	ldw	r2,4(r2)
    972c:	10c02014 	ori	r3,r2,128
    9730:	e0bffc17 	ldw	r2,-16(fp)
    9734:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    9738:	e0bffc17 	ldw	r2,-16(fp)
    973c:	10800017 	ldw	r2,0(r2)
    9740:	10800304 	addi	r2,r2,12
    9744:	e0fffc17 	ldw	r3,-16(fp)
    9748:	18c00117 	ldw	r3,4(r3)
    974c:	10c00035 	stwio	r3,0(r2)
    9750:	e0bff717 	ldw	r2,-36(fp)
    9754:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9758:	e0bff917 	ldw	r2,-28(fp)
    975c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    9760:	e0bff417 	ldw	r2,-48(fp)
    9764:	1000021e 	bne	r2,zero,9770 <altera_avalon_uart_read+0x180>
    9768:	e0bffe17 	ldw	r2,-8(fp)
    976c:	103fce1e 	bne	r2,zero,96a8 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9770:	0005303a 	rdctl	r2,status
    9774:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9778:	e0fffa17 	ldw	r3,-24(fp)
    977c:	00bfff84 	movi	r2,-2
    9780:	1884703a 	and	r2,r3,r2
    9784:	1001703a 	wrctl	status,r2
  
  return context;
    9788:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    978c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    9790:	e0bffc17 	ldw	r2,-16(fp)
    9794:	10800117 	ldw	r2,4(r2)
    9798:	10c02014 	ori	r3,r2,128
    979c:	e0bffc17 	ldw	r2,-16(fp)
    97a0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    97a4:	e0bffc17 	ldw	r2,-16(fp)
    97a8:	10800017 	ldw	r2,0(r2)
    97ac:	10800304 	addi	r2,r2,12
    97b0:	e0fffc17 	ldw	r3,-16(fp)
    97b4:	18c00117 	ldw	r3,4(r3)
    97b8:	10c00035 	stwio	r3,0(r2)
    97bc:	e0bff717 	ldw	r2,-36(fp)
    97c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97c4:	e0bffb17 	ldw	r2,-20(fp)
    97c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    97cc:	e0bff303 	ldbu	r2,-52(fp)
    97d0:	10000226 	beq	r2,zero,97dc <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
    97d4:	00bffd44 	movi	r2,-11
    97d8:	00000106 	br	97e0 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
    97dc:	e0bff417 	ldw	r2,-48(fp)
  }
}
    97e0:	e037883a 	mov	sp,fp
    97e4:	dfc00117 	ldw	ra,4(sp)
    97e8:	df000017 	ldw	fp,0(sp)
    97ec:	dec00204 	addi	sp,sp,8
    97f0:	f800283a 	ret

000097f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97f4:	defffe04 	addi	sp,sp,-8
    97f8:	dfc00115 	stw	ra,4(sp)
    97fc:	df000015 	stw	fp,0(sp)
    9800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9804:	00800074 	movhi	r2,1
    9808:	10b09904 	addi	r2,r2,-15772
    980c:	10800017 	ldw	r2,0(r2)
    9810:	10000526 	beq	r2,zero,9828 <alt_get_errno+0x34>
    9814:	00800074 	movhi	r2,1
    9818:	10b09904 	addi	r2,r2,-15772
    981c:	10800017 	ldw	r2,0(r2)
    9820:	103ee83a 	callr	r2
    9824:	00000206 	br	9830 <alt_get_errno+0x3c>
    9828:	00800074 	movhi	r2,1
    982c:	10b59d04 	addi	r2,r2,-10636
}
    9830:	e037883a 	mov	sp,fp
    9834:	dfc00117 	ldw	ra,4(sp)
    9838:	df000017 	ldw	fp,0(sp)
    983c:	dec00204 	addi	sp,sp,8
    9840:	f800283a 	ret

00009844 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9844:	defff204 	addi	sp,sp,-56
    9848:	dfc00d15 	stw	ra,52(sp)
    984c:	df000c15 	stw	fp,48(sp)
    9850:	df000c04 	addi	fp,sp,48
    9854:	e13ffc15 	stw	r4,-16(fp)
    9858:	e17ffd15 	stw	r5,-12(fp)
    985c:	e1bffe15 	stw	r6,-8(fp)
    9860:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    9864:	e0bffe17 	ldw	r2,-8(fp)
    9868:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    986c:	e0bfff17 	ldw	r2,-4(fp)
    9870:	1090000c 	andi	r2,r2,16384
    9874:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    9878:	00003b06 	br	9968 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    987c:	e0bffc17 	ldw	r2,-16(fp)
    9880:	10800517 	ldw	r2,20(r2)
    9884:	10800044 	addi	r2,r2,1
    9888:	10800fcc 	andi	r2,r2,63
    988c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    9890:	e0bffc17 	ldw	r2,-16(fp)
    9894:	10c00417 	ldw	r3,16(r2)
    9898:	e0bff617 	ldw	r2,-40(fp)
    989c:	1880211e 	bne	r3,r2,9924 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
    98a0:	e0bff517 	ldw	r2,-44(fp)
    98a4:	10000426 	beq	r2,zero,98b8 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    98a8:	00097f40 	call	97f4 <alt_get_errno>
    98ac:	00c002c4 	movi	r3,11
    98b0:	10c00015 	stw	r3,0(r2)
        break;
    98b4:	00002e06 	br	9970 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98b8:	0005303a 	rdctl	r2,status
    98bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98c0:	e0fff817 	ldw	r3,-32(fp)
    98c4:	00bfff84 	movi	r2,-2
    98c8:	1884703a 	and	r2,r3,r2
    98cc:	1001703a 	wrctl	status,r2
  
  return context;
    98d0:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    98d4:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    98d8:	e0bffc17 	ldw	r2,-16(fp)
    98dc:	10800117 	ldw	r2,4(r2)
    98e0:	10c11014 	ori	r3,r2,1088
    98e4:	e0bffc17 	ldw	r2,-16(fp)
    98e8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    98ec:	e0bffc17 	ldw	r2,-16(fp)
    98f0:	10800017 	ldw	r2,0(r2)
    98f4:	10800304 	addi	r2,r2,12
    98f8:	e0fffc17 	ldw	r3,-16(fp)
    98fc:	18c00117 	ldw	r3,4(r3)
    9900:	10c00035 	stwio	r3,0(r2)
    9904:	e0bff717 	ldw	r2,-36(fp)
    9908:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    990c:	e0bff917 	ldw	r2,-28(fp)
    9910:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    9914:	e0bffc17 	ldw	r2,-16(fp)
    9918:	10c00417 	ldw	r3,16(r2)
    991c:	e0bff617 	ldw	r2,-40(fp)
    9920:	18bffc26 	beq	r3,r2,9914 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
    9924:	e0bff417 	ldw	r2,-48(fp)
    9928:	10bfffc4 	addi	r2,r2,-1
    992c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    9930:	e0bffc17 	ldw	r2,-16(fp)
    9934:	10800517 	ldw	r2,20(r2)
    9938:	e0fffd17 	ldw	r3,-12(fp)
    993c:	18c00003 	ldbu	r3,0(r3)
    9940:	e13ffc17 	ldw	r4,-16(fp)
    9944:	2085883a 	add	r2,r4,r2
    9948:	10801704 	addi	r2,r2,92
    994c:	10c00005 	stb	r3,0(r2)
    9950:	e0bffd17 	ldw	r2,-12(fp)
    9954:	10800044 	addi	r2,r2,1
    9958:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    995c:	e0bffc17 	ldw	r2,-16(fp)
    9960:	e0fff617 	ldw	r3,-40(fp)
    9964:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    9968:	e0bff417 	ldw	r2,-48(fp)
    996c:	103fc31e 	bne	r2,zero,987c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9970:	0005303a 	rdctl	r2,status
    9974:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9978:	e0fffa17 	ldw	r3,-24(fp)
    997c:	00bfff84 	movi	r2,-2
    9980:	1884703a 	and	r2,r3,r2
    9984:	1001703a 	wrctl	status,r2
  
  return context;
    9988:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    998c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    9990:	e0bffc17 	ldw	r2,-16(fp)
    9994:	10800117 	ldw	r2,4(r2)
    9998:	10c11014 	ori	r3,r2,1088
    999c:	e0bffc17 	ldw	r2,-16(fp)
    99a0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    99a4:	e0bffc17 	ldw	r2,-16(fp)
    99a8:	10800017 	ldw	r2,0(r2)
    99ac:	10800304 	addi	r2,r2,12
    99b0:	e0fffc17 	ldw	r3,-16(fp)
    99b4:	18c00117 	ldw	r3,4(r3)
    99b8:	10c00035 	stwio	r3,0(r2)
    99bc:	e0bff717 	ldw	r2,-36(fp)
    99c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99c4:	e0bffb17 	ldw	r2,-20(fp)
    99c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    99cc:	e0fffe17 	ldw	r3,-8(fp)
    99d0:	e0bff417 	ldw	r2,-48(fp)
    99d4:	1885c83a 	sub	r2,r3,r2
}
    99d8:	e037883a 	mov	sp,fp
    99dc:	dfc00117 	ldw	ra,4(sp)
    99e0:	df000017 	ldw	fp,0(sp)
    99e4:	dec00204 	addi	sp,sp,8
    99e8:	f800283a 	ret

000099ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    99ec:	defff504 	addi	sp,sp,-44
    99f0:	df000a15 	stw	fp,40(sp)
    99f4:	df000a04 	addi	fp,sp,40
    99f8:	e13ffc15 	stw	r4,-16(fp)
    99fc:	e17ffd15 	stw	r5,-12(fp)
    9a00:	e1bffe15 	stw	r6,-8(fp)
    9a04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9a08:	e03ff615 	stw	zero,-40(fp)
    9a0c:	00800074 	movhi	r2,1
    9a10:	10b59b04 	addi	r2,r2,-10644
    9a14:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    9a18:	10003f26 	beq	r2,zero,9b18 <alt_alarm_start+0x12c>
  {
    if (alarm)
    9a1c:	e0bffc17 	ldw	r2,-16(fp)
    9a20:	10003b26 	beq	r2,zero,9b10 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    9a24:	e0bffc17 	ldw	r2,-16(fp)
    9a28:	e0fffe17 	ldw	r3,-8(fp)
    9a2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    9a30:	e0bffc17 	ldw	r2,-16(fp)
    9a34:	e0ffff17 	ldw	r3,-4(fp)
    9a38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a3c:	0005303a 	rdctl	r2,status
    9a40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a44:	e0fff817 	ldw	r3,-32(fp)
    9a48:	00bfff84 	movi	r2,-2
    9a4c:	1884703a 	and	r2,r3,r2
    9a50:	1001703a 	wrctl	status,r2
  
  return context;
    9a54:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9a58:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9a5c:	00800074 	movhi	r2,1
    9a60:	10b59c04 	addi	r2,r2,-10640
    9a64:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9a68:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    9a6c:	e0fffd17 	ldw	r3,-12(fp)
    9a70:	e0bff617 	ldw	r2,-40(fp)
    9a74:	1885883a 	add	r2,r3,r2
    9a78:	10c00044 	addi	r3,r2,1
    9a7c:	e0bffc17 	ldw	r2,-16(fp)
    9a80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9a84:	e0bffc17 	ldw	r2,-16(fp)
    9a88:	10c00217 	ldw	r3,8(r2)
    9a8c:	e0bff617 	ldw	r2,-40(fp)
    9a90:	1880042e 	bgeu	r3,r2,9aa4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    9a94:	e0bffc17 	ldw	r2,-16(fp)
    9a98:	00c00044 	movi	r3,1
    9a9c:	10c00405 	stb	r3,16(r2)
    9aa0:	00000206 	br	9aac <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    9aa4:	e0bffc17 	ldw	r2,-16(fp)
    9aa8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    9aac:	e0bffc17 	ldw	r2,-16(fp)
    9ab0:	00c00074 	movhi	r3,1
    9ab4:	18f09b04 	addi	r3,r3,-15764
    9ab8:	e0fff915 	stw	r3,-28(fp)
    9abc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9ac0:	e0bffa17 	ldw	r2,-24(fp)
    9ac4:	e0fff917 	ldw	r3,-28(fp)
    9ac8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9acc:	e0bff917 	ldw	r2,-28(fp)
    9ad0:	10c00017 	ldw	r3,0(r2)
    9ad4:	e0bffa17 	ldw	r2,-24(fp)
    9ad8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9adc:	e0bff917 	ldw	r2,-28(fp)
    9ae0:	10800017 	ldw	r2,0(r2)
    9ae4:	e0fffa17 	ldw	r3,-24(fp)
    9ae8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9aec:	e0bff917 	ldw	r2,-28(fp)
    9af0:	e0fffa17 	ldw	r3,-24(fp)
    9af4:	10c00015 	stw	r3,0(r2)
    9af8:	e0bff717 	ldw	r2,-36(fp)
    9afc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b00:	e0bffb17 	ldw	r2,-20(fp)
    9b04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9b08:	0005883a 	mov	r2,zero
    9b0c:	00000306 	br	9b1c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    9b10:	00bffa84 	movi	r2,-22
    9b14:	00000106 	br	9b1c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    9b18:	00bfde84 	movi	r2,-134
  }
}
    9b1c:	e037883a 	mov	sp,fp
    9b20:	df000017 	ldw	fp,0(sp)
    9b24:	dec00104 	addi	sp,sp,4
    9b28:	f800283a 	ret

00009b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b2c:	defffe04 	addi	sp,sp,-8
    9b30:	dfc00115 	stw	ra,4(sp)
    9b34:	df000015 	stw	fp,0(sp)
    9b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9b3c:	00800074 	movhi	r2,1
    9b40:	10b09904 	addi	r2,r2,-15772
    9b44:	10800017 	ldw	r2,0(r2)
    9b48:	10000526 	beq	r2,zero,9b60 <alt_get_errno+0x34>
    9b4c:	00800074 	movhi	r2,1
    9b50:	10b09904 	addi	r2,r2,-15772
    9b54:	10800017 	ldw	r2,0(r2)
    9b58:	103ee83a 	callr	r2
    9b5c:	00000206 	br	9b68 <alt_get_errno+0x3c>
    9b60:	00800074 	movhi	r2,1
    9b64:	10b59d04 	addi	r2,r2,-10636
}
    9b68:	e037883a 	mov	sp,fp
    9b6c:	dfc00117 	ldw	ra,4(sp)
    9b70:	df000017 	ldw	fp,0(sp)
    9b74:	dec00204 	addi	sp,sp,8
    9b78:	f800283a 	ret

00009b7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9b7c:	defffb04 	addi	sp,sp,-20
    9b80:	dfc00415 	stw	ra,16(sp)
    9b84:	df000315 	stw	fp,12(sp)
    9b88:	df000304 	addi	fp,sp,12
    9b8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9b90:	e0bfff17 	ldw	r2,-4(fp)
    9b94:	10000616 	blt	r2,zero,9bb0 <close+0x34>
    9b98:	e0bfff17 	ldw	r2,-4(fp)
    9b9c:	10c00324 	muli	r3,r2,12
    9ba0:	00800074 	movhi	r2,1
    9ba4:	10affc04 	addi	r2,r2,-16400
    9ba8:	1885883a 	add	r2,r3,r2
    9bac:	00000106 	br	9bb4 <close+0x38>
    9bb0:	0005883a 	mov	r2,zero
    9bb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9bb8:	e0bffd17 	ldw	r2,-12(fp)
    9bbc:	10001826 	beq	r2,zero,9c20 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9bc0:	e0bffd17 	ldw	r2,-12(fp)
    9bc4:	10800017 	ldw	r2,0(r2)
    9bc8:	10800417 	ldw	r2,16(r2)
    9bcc:	10000626 	beq	r2,zero,9be8 <close+0x6c>
    9bd0:	e0bffd17 	ldw	r2,-12(fp)
    9bd4:	10800017 	ldw	r2,0(r2)
    9bd8:	10800417 	ldw	r2,16(r2)
    9bdc:	e13ffd17 	ldw	r4,-12(fp)
    9be0:	103ee83a 	callr	r2
    9be4:	00000106 	br	9bec <close+0x70>
    9be8:	0005883a 	mov	r2,zero
    9bec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9bf0:	e13fff17 	ldw	r4,-4(fp)
    9bf4:	000a4fc0 	call	a4fc <alt_release_fd>
    if (rval < 0)
    9bf8:	e0bffe17 	ldw	r2,-8(fp)
    9bfc:	1000060e 	bge	r2,zero,9c18 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    9c00:	0009b2c0 	call	9b2c <alt_get_errno>
    9c04:	e0fffe17 	ldw	r3,-8(fp)
    9c08:	00c7c83a 	sub	r3,zero,r3
    9c0c:	10c00015 	stw	r3,0(r2)
      return -1;
    9c10:	00bfffc4 	movi	r2,-1
    9c14:	00000606 	br	9c30 <close+0xb4>
    }
    return 0;
    9c18:	0005883a 	mov	r2,zero
    9c1c:	00000406 	br	9c30 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9c20:	0009b2c0 	call	9b2c <alt_get_errno>
    9c24:	00c01444 	movi	r3,81
    9c28:	10c00015 	stw	r3,0(r2)
    return -1;
    9c2c:	00bfffc4 	movi	r2,-1
  }
}
    9c30:	e037883a 	mov	sp,fp
    9c34:	dfc00117 	ldw	ra,4(sp)
    9c38:	df000017 	ldw	fp,0(sp)
    9c3c:	dec00204 	addi	sp,sp,8
    9c40:	f800283a 	ret

00009c44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9c44:	defffe04 	addi	sp,sp,-8
    9c48:	df000115 	stw	fp,4(sp)
    9c4c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9c50:	e03fff15 	stw	zero,-4(fp)
    9c54:	00000506 	br	9c6c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    9c58:	e0bfff17 	ldw	r2,-4(fp)
    9c5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9c60:	e0bfff17 	ldw	r2,-4(fp)
    9c64:	10800804 	addi	r2,r2,32
    9c68:	e0bfff15 	stw	r2,-4(fp)
    9c6c:	e0bfff17 	ldw	r2,-4(fp)
    9c70:	10820030 	cmpltui	r2,r2,2048
    9c74:	103ff81e 	bne	r2,zero,9c58 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9c78:	e037883a 	mov	sp,fp
    9c7c:	df000017 	ldw	fp,0(sp)
    9c80:	dec00104 	addi	sp,sp,4
    9c84:	f800283a 	ret

00009c88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9c88:	defffc04 	addi	sp,sp,-16
    9c8c:	df000315 	stw	fp,12(sp)
    9c90:	df000304 	addi	fp,sp,12
    9c94:	e13ffd15 	stw	r4,-12(fp)
    9c98:	e17ffe15 	stw	r5,-8(fp)
    9c9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ca4:	e037883a 	mov	sp,fp
    9ca8:	df000017 	ldw	fp,0(sp)
    9cac:	dec00104 	addi	sp,sp,4
    9cb0:	f800283a 	ret

00009cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cb4:	defffe04 	addi	sp,sp,-8
    9cb8:	dfc00115 	stw	ra,4(sp)
    9cbc:	df000015 	stw	fp,0(sp)
    9cc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9cc4:	00800074 	movhi	r2,1
    9cc8:	10b09904 	addi	r2,r2,-15772
    9ccc:	10800017 	ldw	r2,0(r2)
    9cd0:	10000526 	beq	r2,zero,9ce8 <alt_get_errno+0x34>
    9cd4:	00800074 	movhi	r2,1
    9cd8:	10b09904 	addi	r2,r2,-15772
    9cdc:	10800017 	ldw	r2,0(r2)
    9ce0:	103ee83a 	callr	r2
    9ce4:	00000206 	br	9cf0 <alt_get_errno+0x3c>
    9ce8:	00800074 	movhi	r2,1
    9cec:	10b59d04 	addi	r2,r2,-10636
}
    9cf0:	e037883a 	mov	sp,fp
    9cf4:	dfc00117 	ldw	ra,4(sp)
    9cf8:	df000017 	ldw	fp,0(sp)
    9cfc:	dec00204 	addi	sp,sp,8
    9d00:	f800283a 	ret

00009d04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9d04:	defffa04 	addi	sp,sp,-24
    9d08:	dfc00515 	stw	ra,20(sp)
    9d0c:	df000415 	stw	fp,16(sp)
    9d10:	df000404 	addi	fp,sp,16
    9d14:	e13ffe15 	stw	r4,-8(fp)
    9d18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9d1c:	e0bffe17 	ldw	r2,-8(fp)
    9d20:	10000326 	beq	r2,zero,9d30 <alt_dev_llist_insert+0x2c>
    9d24:	e0bffe17 	ldw	r2,-8(fp)
    9d28:	10800217 	ldw	r2,8(r2)
    9d2c:	1000051e 	bne	r2,zero,9d44 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9d30:	0009cb40 	call	9cb4 <alt_get_errno>
    9d34:	00c00584 	movi	r3,22
    9d38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9d3c:	00bffa84 	movi	r2,-22
    9d40:	00001306 	br	9d90 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9d44:	e0bffe17 	ldw	r2,-8(fp)
    9d48:	e0ffff17 	ldw	r3,-4(fp)
    9d4c:	e0fffc15 	stw	r3,-16(fp)
    9d50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9d54:	e0bffd17 	ldw	r2,-12(fp)
    9d58:	e0fffc17 	ldw	r3,-16(fp)
    9d5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9d60:	e0bffc17 	ldw	r2,-16(fp)
    9d64:	10c00017 	ldw	r3,0(r2)
    9d68:	e0bffd17 	ldw	r2,-12(fp)
    9d6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9d70:	e0bffc17 	ldw	r2,-16(fp)
    9d74:	10800017 	ldw	r2,0(r2)
    9d78:	e0fffd17 	ldw	r3,-12(fp)
    9d7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9d80:	e0bffc17 	ldw	r2,-16(fp)
    9d84:	e0fffd17 	ldw	r3,-12(fp)
    9d88:	10c00015 	stw	r3,0(r2)

  return 0;  
    9d8c:	0005883a 	mov	r2,zero
}
    9d90:	e037883a 	mov	sp,fp
    9d94:	dfc00117 	ldw	ra,4(sp)
    9d98:	df000017 	ldw	fp,0(sp)
    9d9c:	dec00204 	addi	sp,sp,8
    9da0:	f800283a 	ret

00009da4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9da4:	defffd04 	addi	sp,sp,-12
    9da8:	dfc00215 	stw	ra,8(sp)
    9dac:	df000115 	stw	fp,4(sp)
    9db0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9db4:	00800074 	movhi	r2,1
    9db8:	10ab9804 	addi	r2,r2,-20896
    9dbc:	e0bfff15 	stw	r2,-4(fp)
    9dc0:	00000606 	br	9ddc <_do_ctors+0x38>
        (*ctor) (); 
    9dc4:	e0bfff17 	ldw	r2,-4(fp)
    9dc8:	10800017 	ldw	r2,0(r2)
    9dcc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9dd0:	e0bfff17 	ldw	r2,-4(fp)
    9dd4:	10bfff04 	addi	r2,r2,-4
    9dd8:	e0bfff15 	stw	r2,-4(fp)
    9ddc:	e0ffff17 	ldw	r3,-4(fp)
    9de0:	00800074 	movhi	r2,1
    9de4:	10ab9904 	addi	r2,r2,-20892
    9de8:	18bff62e 	bgeu	r3,r2,9dc4 <_do_ctors+0x20>
        (*ctor) (); 
}
    9dec:	e037883a 	mov	sp,fp
    9df0:	dfc00117 	ldw	ra,4(sp)
    9df4:	df000017 	ldw	fp,0(sp)
    9df8:	dec00204 	addi	sp,sp,8
    9dfc:	f800283a 	ret

00009e00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9e00:	defffd04 	addi	sp,sp,-12
    9e04:	dfc00215 	stw	ra,8(sp)
    9e08:	df000115 	stw	fp,4(sp)
    9e0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9e10:	00800074 	movhi	r2,1
    9e14:	10ab9804 	addi	r2,r2,-20896
    9e18:	e0bfff15 	stw	r2,-4(fp)
    9e1c:	00000606 	br	9e38 <_do_dtors+0x38>
        (*dtor) (); 
    9e20:	e0bfff17 	ldw	r2,-4(fp)
    9e24:	10800017 	ldw	r2,0(r2)
    9e28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	10bfff04 	addi	r2,r2,-4
    9e34:	e0bfff15 	stw	r2,-4(fp)
    9e38:	e0ffff17 	ldw	r3,-4(fp)
    9e3c:	00800074 	movhi	r2,1
    9e40:	10ab9904 	addi	r2,r2,-20892
    9e44:	18bff62e 	bgeu	r3,r2,9e20 <_do_dtors+0x20>
        (*dtor) (); 
}
    9e48:	e037883a 	mov	sp,fp
    9e4c:	dfc00117 	ldw	ra,4(sp)
    9e50:	df000017 	ldw	fp,0(sp)
    9e54:	dec00204 	addi	sp,sp,8
    9e58:	f800283a 	ret

00009e5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9e5c:	defffe04 	addi	sp,sp,-8
    9e60:	dfc00115 	stw	ra,4(sp)
    9e64:	df000015 	stw	fp,0(sp)
    9e68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9e6c:	0009883a 	mov	r4,zero
    9e70:	01440004 	movi	r5,4096
    9e74:	000a9700 	call	a970 <alt_icache_flush>
#endif
}
    9e78:	e037883a 	mov	sp,fp
    9e7c:	dfc00117 	ldw	ra,4(sp)
    9e80:	df000017 	ldw	fp,0(sp)
    9e84:	dec00204 	addi	sp,sp,8
    9e88:	f800283a 	ret

00009e8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9e8c:	defff904 	addi	sp,sp,-28
    9e90:	dfc00615 	stw	ra,24(sp)
    9e94:	df000515 	stw	fp,20(sp)
    9e98:	df000504 	addi	fp,sp,20
    9e9c:	e13ffc15 	stw	r4,-16(fp)
    9ea0:	e17ffd15 	stw	r5,-12(fp)
    9ea4:	e1bffe15 	stw	r6,-8(fp)
    9ea8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9eac:	e0800217 	ldw	r2,8(fp)
    9eb0:	d8800015 	stw	r2,0(sp)
    9eb4:	e13ffc17 	ldw	r4,-16(fp)
    9eb8:	e17ffd17 	ldw	r5,-12(fp)
    9ebc:	e1bffe17 	ldw	r6,-8(fp)
    9ec0:	e1ffff17 	ldw	r7,-4(fp)
    9ec4:	000a0640 	call	a064 <alt_iic_isr_register>
}  
    9ec8:	e037883a 	mov	sp,fp
    9ecc:	dfc00117 	ldw	ra,4(sp)
    9ed0:	df000017 	ldw	fp,0(sp)
    9ed4:	dec00204 	addi	sp,sp,8
    9ed8:	f800283a 	ret

00009edc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9edc:	defff904 	addi	sp,sp,-28
    9ee0:	df000615 	stw	fp,24(sp)
    9ee4:	df000604 	addi	fp,sp,24
    9ee8:	e13ffe15 	stw	r4,-8(fp)
    9eec:	e17fff15 	stw	r5,-4(fp)
    9ef0:	e0bfff17 	ldw	r2,-4(fp)
    9ef4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ef8:	0005303a 	rdctl	r2,status
    9efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f00:	e0fffb17 	ldw	r3,-20(fp)
    9f04:	00bfff84 	movi	r2,-2
    9f08:	1884703a 	and	r2,r3,r2
    9f0c:	1001703a 	wrctl	status,r2
  
  return context;
    9f10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9f14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9f18:	e0bffa17 	ldw	r2,-24(fp)
    9f1c:	00c00044 	movi	r3,1
    9f20:	1884983a 	sll	r2,r3,r2
    9f24:	1007883a 	mov	r3,r2
    9f28:	00800074 	movhi	r2,1
    9f2c:	10b59a04 	addi	r2,r2,-10648
    9f30:	10800017 	ldw	r2,0(r2)
    9f34:	1886b03a 	or	r3,r3,r2
    9f38:	00800074 	movhi	r2,1
    9f3c:	10b59a04 	addi	r2,r2,-10648
    9f40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9f44:	00800074 	movhi	r2,1
    9f48:	10b59a04 	addi	r2,r2,-10648
    9f4c:	10800017 	ldw	r2,0(r2)
    9f50:	100170fa 	wrctl	ienable,r2
    9f54:	e0bffc17 	ldw	r2,-16(fp)
    9f58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
    9f60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9f64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    9f68:	e037883a 	mov	sp,fp
    9f6c:	df000017 	ldw	fp,0(sp)
    9f70:	dec00104 	addi	sp,sp,4
    9f74:	f800283a 	ret

00009f78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9f78:	defff904 	addi	sp,sp,-28
    9f7c:	df000615 	stw	fp,24(sp)
    9f80:	df000604 	addi	fp,sp,24
    9f84:	e13ffe15 	stw	r4,-8(fp)
    9f88:	e17fff15 	stw	r5,-4(fp)
    9f8c:	e0bfff17 	ldw	r2,-4(fp)
    9f90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f94:	0005303a 	rdctl	r2,status
    9f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f9c:	e0fffb17 	ldw	r3,-20(fp)
    9fa0:	00bfff84 	movi	r2,-2
    9fa4:	1884703a 	and	r2,r3,r2
    9fa8:	1001703a 	wrctl	status,r2
  
  return context;
    9fac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9fb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9fb4:	e0bffa17 	ldw	r2,-24(fp)
    9fb8:	00c00044 	movi	r3,1
    9fbc:	1884983a 	sll	r2,r3,r2
    9fc0:	0084303a 	nor	r2,zero,r2
    9fc4:	1007883a 	mov	r3,r2
    9fc8:	00800074 	movhi	r2,1
    9fcc:	10b59a04 	addi	r2,r2,-10648
    9fd0:	10800017 	ldw	r2,0(r2)
    9fd4:	1886703a 	and	r3,r3,r2
    9fd8:	00800074 	movhi	r2,1
    9fdc:	10b59a04 	addi	r2,r2,-10648
    9fe0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9fe4:	00800074 	movhi	r2,1
    9fe8:	10b59a04 	addi	r2,r2,-10648
    9fec:	10800017 	ldw	r2,0(r2)
    9ff0:	100170fa 	wrctl	ienable,r2
    9ff4:	e0bffc17 	ldw	r2,-16(fp)
    9ff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ffc:	e0bffd17 	ldw	r2,-12(fp)
    a000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a004:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a008:	e037883a 	mov	sp,fp
    a00c:	df000017 	ldw	fp,0(sp)
    a010:	dec00104 	addi	sp,sp,4
    a014:	f800283a 	ret

0000a018 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a018:	defffc04 	addi	sp,sp,-16
    a01c:	df000315 	stw	fp,12(sp)
    a020:	df000304 	addi	fp,sp,12
    a024:	e13ffe15 	stw	r4,-8(fp)
    a028:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a02c:	000530fa 	rdctl	r2,ienable
    a030:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a034:	e0bfff17 	ldw	r2,-4(fp)
    a038:	00c00044 	movi	r3,1
    a03c:	1884983a 	sll	r2,r3,r2
    a040:	1007883a 	mov	r3,r2
    a044:	e0bffd17 	ldw	r2,-12(fp)
    a048:	1884703a 	and	r2,r3,r2
    a04c:	1004c03a 	cmpne	r2,r2,zero
    a050:	10803fcc 	andi	r2,r2,255
}
    a054:	e037883a 	mov	sp,fp
    a058:	df000017 	ldw	fp,0(sp)
    a05c:	dec00104 	addi	sp,sp,4
    a060:	f800283a 	ret

0000a064 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a064:	defff504 	addi	sp,sp,-44
    a068:	dfc00a15 	stw	ra,40(sp)
    a06c:	df000915 	stw	fp,36(sp)
    a070:	df000904 	addi	fp,sp,36
    a074:	e13ffc15 	stw	r4,-16(fp)
    a078:	e17ffd15 	stw	r5,-12(fp)
    a07c:	e1bffe15 	stw	r6,-8(fp)
    a080:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a084:	00bffa84 	movi	r2,-22
    a088:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a08c:	e0bffd17 	ldw	r2,-12(fp)
    a090:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a094:	e0bff817 	ldw	r2,-32(fp)
    a098:	10800808 	cmpgei	r2,r2,32
    a09c:	1000271e 	bne	r2,zero,a13c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0a0:	0005303a 	rdctl	r2,status
    a0a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0a8:	e0fffa17 	ldw	r3,-24(fp)
    a0ac:	00bfff84 	movi	r2,-2
    a0b0:	1884703a 	and	r2,r3,r2
    a0b4:	1001703a 	wrctl	status,r2
  
  return context;
    a0b8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a0bc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    a0c0:	00c00074 	movhi	r3,1
    a0c4:	18f59e04 	addi	r3,r3,-10632
    a0c8:	e0bff817 	ldw	r2,-32(fp)
    a0cc:	100490fa 	slli	r2,r2,3
    a0d0:	1885883a 	add	r2,r3,r2
    a0d4:	e0fffe17 	ldw	r3,-8(fp)
    a0d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a0dc:	00c00074 	movhi	r3,1
    a0e0:	18f59e04 	addi	r3,r3,-10632
    a0e4:	e0bff817 	ldw	r2,-32(fp)
    a0e8:	100490fa 	slli	r2,r2,3
    a0ec:	1885883a 	add	r2,r3,r2
    a0f0:	10800104 	addi	r2,r2,4
    a0f4:	e0ffff17 	ldw	r3,-4(fp)
    a0f8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a0fc:	e0bffe17 	ldw	r2,-8(fp)
    a100:	10000526 	beq	r2,zero,a118 <alt_iic_isr_register+0xb4>
    a104:	e0bff817 	ldw	r2,-32(fp)
    a108:	e13ffc17 	ldw	r4,-16(fp)
    a10c:	100b883a 	mov	r5,r2
    a110:	0009edc0 	call	9edc <alt_ic_irq_enable>
    a114:	00000406 	br	a128 <alt_iic_isr_register+0xc4>
    a118:	e0bff817 	ldw	r2,-32(fp)
    a11c:	e13ffc17 	ldw	r4,-16(fp)
    a120:	100b883a 	mov	r5,r2
    a124:	0009f780 	call	9f78 <alt_ic_irq_disable>
    a128:	e0bff715 	stw	r2,-36(fp)
    a12c:	e0bff917 	ldw	r2,-28(fp)
    a130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a134:	e0bffb17 	ldw	r2,-20(fp)
    a138:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a13c:	e0bff717 	ldw	r2,-36(fp)
}
    a140:	e037883a 	mov	sp,fp
    a144:	dfc00117 	ldw	ra,4(sp)
    a148:	df000017 	ldw	fp,0(sp)
    a14c:	dec00204 	addi	sp,sp,8
    a150:	f800283a 	ret

0000a154 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a154:	defff904 	addi	sp,sp,-28
    a158:	dfc00615 	stw	ra,24(sp)
    a15c:	df000515 	stw	fp,20(sp)
    a160:	df000504 	addi	fp,sp,20
    a164:	e13ffc15 	stw	r4,-16(fp)
    a168:	e17ffd15 	stw	r5,-12(fp)
    a16c:	e1bffe15 	stw	r6,-8(fp)
    a170:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a174:	e13ffd17 	ldw	r4,-12(fp)
    a178:	e17ffe17 	ldw	r5,-8(fp)
    a17c:	e1bfff17 	ldw	r6,-4(fp)
    a180:	000a3a80 	call	a3a8 <open>
    a184:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a188:	e0bffb17 	ldw	r2,-20(fp)
    a18c:	10001c16 	blt	r2,zero,a200 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    a190:	00c00074 	movhi	r3,1
    a194:	18effc04 	addi	r3,r3,-16400
    a198:	e0bffb17 	ldw	r2,-20(fp)
    a19c:	10800324 	muli	r2,r2,12
    a1a0:	1885883a 	add	r2,r3,r2
    a1a4:	10c00017 	ldw	r3,0(r2)
    a1a8:	e0bffc17 	ldw	r2,-16(fp)
    a1ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a1b0:	00c00074 	movhi	r3,1
    a1b4:	18effc04 	addi	r3,r3,-16400
    a1b8:	e0bffb17 	ldw	r2,-20(fp)
    a1bc:	10800324 	muli	r2,r2,12
    a1c0:	1885883a 	add	r2,r3,r2
    a1c4:	10800104 	addi	r2,r2,4
    a1c8:	10c00017 	ldw	r3,0(r2)
    a1cc:	e0bffc17 	ldw	r2,-16(fp)
    a1d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a1d4:	00c00074 	movhi	r3,1
    a1d8:	18effc04 	addi	r3,r3,-16400
    a1dc:	e0bffb17 	ldw	r2,-20(fp)
    a1e0:	10800324 	muli	r2,r2,12
    a1e4:	1885883a 	add	r2,r3,r2
    a1e8:	10800204 	addi	r2,r2,8
    a1ec:	10c00017 	ldw	r3,0(r2)
    a1f0:	e0bffc17 	ldw	r2,-16(fp)
    a1f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a1f8:	e13ffb17 	ldw	r4,-20(fp)
    a1fc:	000a4fc0 	call	a4fc <alt_release_fd>
  }
} 
    a200:	e037883a 	mov	sp,fp
    a204:	dfc00117 	ldw	ra,4(sp)
    a208:	df000017 	ldw	fp,0(sp)
    a20c:	dec00204 	addi	sp,sp,8
    a210:	f800283a 	ret

0000a214 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a214:	defffb04 	addi	sp,sp,-20
    a218:	dfc00415 	stw	ra,16(sp)
    a21c:	df000315 	stw	fp,12(sp)
    a220:	df000304 	addi	fp,sp,12
    a224:	e13ffd15 	stw	r4,-12(fp)
    a228:	e17ffe15 	stw	r5,-8(fp)
    a22c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a230:	01000074 	movhi	r4,1
    a234:	212fff04 	addi	r4,r4,-16388
    a238:	e17ffd17 	ldw	r5,-12(fp)
    a23c:	01800044 	movi	r6,1
    a240:	01c07fc4 	movi	r7,511
    a244:	000a1540 	call	a154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a248:	01000074 	movhi	r4,1
    a24c:	212ffc04 	addi	r4,r4,-16400
    a250:	e17ffe17 	ldw	r5,-8(fp)
    a254:	000d883a 	mov	r6,zero
    a258:	01c07fc4 	movi	r7,511
    a25c:	000a1540 	call	a154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a260:	01000074 	movhi	r4,1
    a264:	21300204 	addi	r4,r4,-16376
    a268:	e17fff17 	ldw	r5,-4(fp)
    a26c:	01800044 	movi	r6,1
    a270:	01c07fc4 	movi	r7,511
    a274:	000a1540 	call	a154 <alt_open_fd>
}  
    a278:	e037883a 	mov	sp,fp
    a27c:	dfc00117 	ldw	ra,4(sp)
    a280:	df000017 	ldw	fp,0(sp)
    a284:	dec00204 	addi	sp,sp,8
    a288:	f800283a 	ret

0000a28c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a28c:	defffe04 	addi	sp,sp,-8
    a290:	dfc00115 	stw	ra,4(sp)
    a294:	df000015 	stw	fp,0(sp)
    a298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a29c:	00800074 	movhi	r2,1
    a2a0:	10b09904 	addi	r2,r2,-15772
    a2a4:	10800017 	ldw	r2,0(r2)
    a2a8:	10000526 	beq	r2,zero,a2c0 <alt_get_errno+0x34>
    a2ac:	00800074 	movhi	r2,1
    a2b0:	10b09904 	addi	r2,r2,-15772
    a2b4:	10800017 	ldw	r2,0(r2)
    a2b8:	103ee83a 	callr	r2
    a2bc:	00000206 	br	a2c8 <alt_get_errno+0x3c>
    a2c0:	00800074 	movhi	r2,1
    a2c4:	10b59d04 	addi	r2,r2,-10636
}
    a2c8:	e037883a 	mov	sp,fp
    a2cc:	dfc00117 	ldw	ra,4(sp)
    a2d0:	df000017 	ldw	fp,0(sp)
    a2d4:	dec00204 	addi	sp,sp,8
    a2d8:	f800283a 	ret

0000a2dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a2dc:	defffd04 	addi	sp,sp,-12
    a2e0:	df000215 	stw	fp,8(sp)
    a2e4:	df000204 	addi	fp,sp,8
    a2e8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a2ec:	e0bfff17 	ldw	r2,-4(fp)
    a2f0:	10800217 	ldw	r2,8(r2)
    a2f4:	10d00034 	orhi	r3,r2,16384
    a2f8:	e0bfff17 	ldw	r2,-4(fp)
    a2fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a300:	e03ffe15 	stw	zero,-8(fp)
    a304:	00001d06 	br	a37c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a308:	00c00074 	movhi	r3,1
    a30c:	18effc04 	addi	r3,r3,-16400
    a310:	e0bffe17 	ldw	r2,-8(fp)
    a314:	10800324 	muli	r2,r2,12
    a318:	1885883a 	add	r2,r3,r2
    a31c:	10c00017 	ldw	r3,0(r2)
    a320:	e0bfff17 	ldw	r2,-4(fp)
    a324:	10800017 	ldw	r2,0(r2)
    a328:	1880111e 	bne	r3,r2,a370 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a32c:	00c00074 	movhi	r3,1
    a330:	18effc04 	addi	r3,r3,-16400
    a334:	e0bffe17 	ldw	r2,-8(fp)
    a338:	10800324 	muli	r2,r2,12
    a33c:	1885883a 	add	r2,r3,r2
    a340:	10800204 	addi	r2,r2,8
    a344:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a348:	1000090e 	bge	r2,zero,a370 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a34c:	e0bffe17 	ldw	r2,-8(fp)
    a350:	10c00324 	muli	r3,r2,12
    a354:	00800074 	movhi	r2,1
    a358:	10affc04 	addi	r2,r2,-16400
    a35c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a360:	e0bfff17 	ldw	r2,-4(fp)
    a364:	18800226 	beq	r3,r2,a370 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a368:	00bffcc4 	movi	r2,-13
    a36c:	00000a06 	br	a398 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a370:	e0bffe17 	ldw	r2,-8(fp)
    a374:	10800044 	addi	r2,r2,1
    a378:	e0bffe15 	stw	r2,-8(fp)
    a37c:	00800074 	movhi	r2,1
    a380:	10b09804 	addi	r2,r2,-15776
    a384:	10800017 	ldw	r2,0(r2)
    a388:	1007883a 	mov	r3,r2
    a38c:	e0bffe17 	ldw	r2,-8(fp)
    a390:	18bfdd2e 	bgeu	r3,r2,a308 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a394:	0005883a 	mov	r2,zero
}
    a398:	e037883a 	mov	sp,fp
    a39c:	df000017 	ldw	fp,0(sp)
    a3a0:	dec00104 	addi	sp,sp,4
    a3a4:	f800283a 	ret

0000a3a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a3a8:	defff604 	addi	sp,sp,-40
    a3ac:	dfc00915 	stw	ra,36(sp)
    a3b0:	df000815 	stw	fp,32(sp)
    a3b4:	df000804 	addi	fp,sp,32
    a3b8:	e13ffd15 	stw	r4,-12(fp)
    a3bc:	e17ffe15 	stw	r5,-8(fp)
    a3c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a3c4:	00bfffc4 	movi	r2,-1
    a3c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a3cc:	00bffb44 	movi	r2,-19
    a3d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a3d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a3d8:	e13ffd17 	ldw	r4,-12(fp)
    a3dc:	01400074 	movhi	r5,1
    a3e0:	29709604 	addi	r5,r5,-15784
    a3e4:	000a7180 	call	a718 <alt_find_dev>
    a3e8:	e0bff815 	stw	r2,-32(fp)
    a3ec:	e0bff817 	ldw	r2,-32(fp)
    a3f0:	1000051e 	bne	r2,zero,a408 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a3f4:	e13ffd17 	ldw	r4,-12(fp)
    a3f8:	000a7a80 	call	a7a8 <alt_find_file>
    a3fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a400:	00800044 	movi	r2,1
    a404:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a408:	e0bff817 	ldw	r2,-32(fp)
    a40c:	10002926 	beq	r2,zero,a4b4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a410:	e13ff817 	ldw	r4,-32(fp)
    a414:	000a8bc0 	call	a8bc <alt_get_fd>
    a418:	e0bff915 	stw	r2,-28(fp)
    a41c:	e0bff917 	ldw	r2,-28(fp)
    a420:	1000030e 	bge	r2,zero,a430 <open+0x88>
    {
      status = index;
    a424:	e0bff917 	ldw	r2,-28(fp)
    a428:	e0bffa15 	stw	r2,-24(fp)
    a42c:	00002306 	br	a4bc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    a430:	e0bff917 	ldw	r2,-28(fp)
    a434:	10c00324 	muli	r3,r2,12
    a438:	00800074 	movhi	r2,1
    a43c:	10affc04 	addi	r2,r2,-16400
    a440:	1885883a 	add	r2,r3,r2
    a444:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a448:	e0fffe17 	ldw	r3,-8(fp)
    a44c:	00900034 	movhi	r2,16384
    a450:	10bfffc4 	addi	r2,r2,-1
    a454:	1886703a 	and	r3,r3,r2
    a458:	e0bffc17 	ldw	r2,-16(fp)
    a45c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a460:	e0bffb17 	ldw	r2,-20(fp)
    a464:	1000051e 	bne	r2,zero,a47c <open+0xd4>
    a468:	e13ffc17 	ldw	r4,-16(fp)
    a46c:	000a2dc0 	call	a2dc <alt_file_locked>
    a470:	e0bffa15 	stw	r2,-24(fp)
    a474:	e0bffa17 	ldw	r2,-24(fp)
    a478:	10001016 	blt	r2,zero,a4bc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a47c:	e0bff817 	ldw	r2,-32(fp)
    a480:	10800317 	ldw	r2,12(r2)
    a484:	10000826 	beq	r2,zero,a4a8 <open+0x100>
    a488:	e0bff817 	ldw	r2,-32(fp)
    a48c:	10800317 	ldw	r2,12(r2)
    a490:	e13ffc17 	ldw	r4,-16(fp)
    a494:	e17ffd17 	ldw	r5,-12(fp)
    a498:	e1bffe17 	ldw	r6,-8(fp)
    a49c:	e1ffff17 	ldw	r7,-4(fp)
    a4a0:	103ee83a 	callr	r2
    a4a4:	00000106 	br	a4ac <open+0x104>
    a4a8:	0005883a 	mov	r2,zero
    a4ac:	e0bffa15 	stw	r2,-24(fp)
    a4b0:	00000206 	br	a4bc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a4b4:	00bffb44 	movi	r2,-19
    a4b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a4bc:	e0bffa17 	ldw	r2,-24(fp)
    a4c0:	1000080e 	bge	r2,zero,a4e4 <open+0x13c>
  {
    alt_release_fd (index);  
    a4c4:	e13ff917 	ldw	r4,-28(fp)
    a4c8:	000a4fc0 	call	a4fc <alt_release_fd>
    ALT_ERRNO = -status;
    a4cc:	000a28c0 	call	a28c <alt_get_errno>
    a4d0:	e0fffa17 	ldw	r3,-24(fp)
    a4d4:	00c7c83a 	sub	r3,zero,r3
    a4d8:	10c00015 	stw	r3,0(r2)
    return -1;
    a4dc:	00bfffc4 	movi	r2,-1
    a4e0:	00000106 	br	a4e8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    a4e4:	e0bff917 	ldw	r2,-28(fp)
}
    a4e8:	e037883a 	mov	sp,fp
    a4ec:	dfc00117 	ldw	ra,4(sp)
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00204 	addi	sp,sp,8
    a4f8:	f800283a 	ret

0000a4fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a4fc:	defffe04 	addi	sp,sp,-8
    a500:	df000115 	stw	fp,4(sp)
    a504:	df000104 	addi	fp,sp,4
    a508:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a50c:	e0bfff17 	ldw	r2,-4(fp)
    a510:	108000d0 	cmplti	r2,r2,3
    a514:	10000d1e 	bne	r2,zero,a54c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a518:	00c00074 	movhi	r3,1
    a51c:	18effc04 	addi	r3,r3,-16400
    a520:	e0bfff17 	ldw	r2,-4(fp)
    a524:	10800324 	muli	r2,r2,12
    a528:	1885883a 	add	r2,r3,r2
    a52c:	10800204 	addi	r2,r2,8
    a530:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a534:	00c00074 	movhi	r3,1
    a538:	18effc04 	addi	r3,r3,-16400
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800324 	muli	r2,r2,12
    a544:	1885883a 	add	r2,r3,r2
    a548:	10000015 	stw	zero,0(r2)
  }
}
    a54c:	e037883a 	mov	sp,fp
    a550:	df000017 	ldw	fp,0(sp)
    a554:	dec00104 	addi	sp,sp,4
    a558:	f800283a 	ret

0000a55c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a55c:	defffa04 	addi	sp,sp,-24
    a560:	df000515 	stw	fp,20(sp)
    a564:	df000504 	addi	fp,sp,20
    a568:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a56c:	0005303a 	rdctl	r2,status
    a570:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a574:	e0fffc17 	ldw	r3,-16(fp)
    a578:	00bfff84 	movi	r2,-2
    a57c:	1884703a 	and	r2,r3,r2
    a580:	1001703a 	wrctl	status,r2
  
  return context;
    a584:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a588:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a58c:	e0bfff17 	ldw	r2,-4(fp)
    a590:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a594:	e0bffd17 	ldw	r2,-12(fp)
    a598:	10800017 	ldw	r2,0(r2)
    a59c:	e0fffd17 	ldw	r3,-12(fp)
    a5a0:	18c00117 	ldw	r3,4(r3)
    a5a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a5a8:	e0bffd17 	ldw	r2,-12(fp)
    a5ac:	10800117 	ldw	r2,4(r2)
    a5b0:	e0fffd17 	ldw	r3,-12(fp)
    a5b4:	18c00017 	ldw	r3,0(r3)
    a5b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a5bc:	e0bffd17 	ldw	r2,-12(fp)
    a5c0:	e0fffd17 	ldw	r3,-12(fp)
    a5c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a5c8:	e0bffd17 	ldw	r2,-12(fp)
    a5cc:	e0fffd17 	ldw	r3,-12(fp)
    a5d0:	10c00015 	stw	r3,0(r2)
    a5d4:	e0bffb17 	ldw	r2,-20(fp)
    a5d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a5dc:	e0bffe17 	ldw	r2,-8(fp)
    a5e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a5e4:	e037883a 	mov	sp,fp
    a5e8:	df000017 	ldw	fp,0(sp)
    a5ec:	dec00104 	addi	sp,sp,4
    a5f0:	f800283a 	ret

0000a5f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a5f4:	defffb04 	addi	sp,sp,-20
    a5f8:	dfc00415 	stw	ra,16(sp)
    a5fc:	df000315 	stw	fp,12(sp)
    a600:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a604:	d0a00717 	ldw	r2,-32740(gp)
    a608:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a60c:	d0a50817 	ldw	r2,-27616(gp)
    a610:	10800044 	addi	r2,r2,1
    a614:	d0a50815 	stw	r2,-27616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a618:	00002e06 	br	a6d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a61c:	e0bffd17 	ldw	r2,-12(fp)
    a620:	10800017 	ldw	r2,0(r2)
    a624:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a628:	e0bffd17 	ldw	r2,-12(fp)
    a62c:	10800403 	ldbu	r2,16(r2)
    a630:	10803fcc 	andi	r2,r2,255
    a634:	10000426 	beq	r2,zero,a648 <alt_tick+0x54>
    a638:	d0a50817 	ldw	r2,-27616(gp)
    a63c:	1000021e 	bne	r2,zero,a648 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a640:	e0bffd17 	ldw	r2,-12(fp)
    a644:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a648:	e0bffd17 	ldw	r2,-12(fp)
    a64c:	10800217 	ldw	r2,8(r2)
    a650:	d0e50817 	ldw	r3,-27616(gp)
    a654:	18801d36 	bltu	r3,r2,a6cc <alt_tick+0xd8>
    a658:	e0bffd17 	ldw	r2,-12(fp)
    a65c:	10800403 	ldbu	r2,16(r2)
    a660:	10803fcc 	andi	r2,r2,255
    a664:	1000191e 	bne	r2,zero,a6cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a668:	e0bffd17 	ldw	r2,-12(fp)
    a66c:	10c00317 	ldw	r3,12(r2)
    a670:	e0bffd17 	ldw	r2,-12(fp)
    a674:	10800517 	ldw	r2,20(r2)
    a678:	1009883a 	mov	r4,r2
    a67c:	183ee83a 	callr	r3
    a680:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a684:	e0bfff17 	ldw	r2,-4(fp)
    a688:	1000031e 	bne	r2,zero,a698 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a68c:	e13ffd17 	ldw	r4,-12(fp)
    a690:	000a55c0 	call	a55c <alt_alarm_stop>
    a694:	00000d06 	br	a6cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a698:	e0bffd17 	ldw	r2,-12(fp)
    a69c:	10c00217 	ldw	r3,8(r2)
    a6a0:	e0bfff17 	ldw	r2,-4(fp)
    a6a4:	1887883a 	add	r3,r3,r2
    a6a8:	e0bffd17 	ldw	r2,-12(fp)
    a6ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a6b0:	e0bffd17 	ldw	r2,-12(fp)
    a6b4:	10c00217 	ldw	r3,8(r2)
    a6b8:	d0a50817 	ldw	r2,-27616(gp)
    a6bc:	1880032e 	bgeu	r3,r2,a6cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a6c0:	e0bffd17 	ldw	r2,-12(fp)
    a6c4:	00c00044 	movi	r3,1
    a6c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a6cc:	e0bffe17 	ldw	r2,-8(fp)
    a6d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a6d4:	e0fffd17 	ldw	r3,-12(fp)
    a6d8:	d0a00704 	addi	r2,gp,-32740
    a6dc:	18bfcf1e 	bne	r3,r2,a61c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a6e0:	0001883a 	nop
}
    a6e4:	e037883a 	mov	sp,fp
    a6e8:	dfc00117 	ldw	ra,4(sp)
    a6ec:	df000017 	ldw	fp,0(sp)
    a6f0:	dec00204 	addi	sp,sp,8
    a6f4:	f800283a 	ret

0000a6f8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a6f8:	deffff04 	addi	sp,sp,-4
    a6fc:	df000015 	stw	fp,0(sp)
    a700:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a704:	000170fa 	wrctl	ienable,zero
}
    a708:	e037883a 	mov	sp,fp
    a70c:	df000017 	ldw	fp,0(sp)
    a710:	dec00104 	addi	sp,sp,4
    a714:	f800283a 	ret

0000a718 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a718:	defffa04 	addi	sp,sp,-24
    a71c:	dfc00515 	stw	ra,20(sp)
    a720:	df000415 	stw	fp,16(sp)
    a724:	df000404 	addi	fp,sp,16
    a728:	e13ffe15 	stw	r4,-8(fp)
    a72c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	10800017 	ldw	r2,0(r2)
    a738:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a73c:	e13ffe17 	ldw	r4,-8(fp)
    a740:	000aaa00 	call	aaa0 <strlen>
    a744:	10800044 	addi	r2,r2,1
    a748:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a74c:	00000d06 	br	a784 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a750:	e0bffc17 	ldw	r2,-16(fp)
    a754:	10c00217 	ldw	r3,8(r2)
    a758:	e0bffd17 	ldw	r2,-12(fp)
    a75c:	1809883a 	mov	r4,r3
    a760:	e17ffe17 	ldw	r5,-8(fp)
    a764:	100d883a 	mov	r6,r2
    a768:	000aa300 	call	aa30 <memcmp>
    a76c:	1000021e 	bne	r2,zero,a778 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a770:	e0bffc17 	ldw	r2,-16(fp)
    a774:	00000706 	br	a794 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a778:	e0bffc17 	ldw	r2,-16(fp)
    a77c:	10800017 	ldw	r2,0(r2)
    a780:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a784:	e0fffc17 	ldw	r3,-16(fp)
    a788:	e0bfff17 	ldw	r2,-4(fp)
    a78c:	18bff01e 	bne	r3,r2,a750 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a790:	0005883a 	mov	r2,zero
}
    a794:	e037883a 	mov	sp,fp
    a798:	dfc00117 	ldw	ra,4(sp)
    a79c:	df000017 	ldw	fp,0(sp)
    a7a0:	dec00204 	addi	sp,sp,8
    a7a4:	f800283a 	ret

0000a7a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a7a8:	defffb04 	addi	sp,sp,-20
    a7ac:	dfc00415 	stw	ra,16(sp)
    a7b0:	df000315 	stw	fp,12(sp)
    a7b4:	df000304 	addi	fp,sp,12
    a7b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a7bc:	00800074 	movhi	r2,1
    a7c0:	10b09404 	addi	r2,r2,-15792
    a7c4:	10800017 	ldw	r2,0(r2)
    a7c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a7cc:	00003106 	br	a894 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a7d0:	e0bffd17 	ldw	r2,-12(fp)
    a7d4:	10800217 	ldw	r2,8(r2)
    a7d8:	1009883a 	mov	r4,r2
    a7dc:	000aaa00 	call	aaa0 <strlen>
    a7e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	10c00217 	ldw	r3,8(r2)
    a7ec:	e0bffe17 	ldw	r2,-8(fp)
    a7f0:	10bfffc4 	addi	r2,r2,-1
    a7f4:	1885883a 	add	r2,r3,r2
    a7f8:	10800003 	ldbu	r2,0(r2)
    a7fc:	10803fcc 	andi	r2,r2,255
    a800:	1080201c 	xori	r2,r2,128
    a804:	10bfe004 	addi	r2,r2,-128
    a808:	10800bd8 	cmpnei	r2,r2,47
    a80c:	1000031e 	bne	r2,zero,a81c <alt_find_file+0x74>
    {
      len -= 1;
    a810:	e0bffe17 	ldw	r2,-8(fp)
    a814:	10bfffc4 	addi	r2,r2,-1
    a818:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a81c:	e0bffe17 	ldw	r2,-8(fp)
    a820:	e0ffff17 	ldw	r3,-4(fp)
    a824:	1885883a 	add	r2,r3,r2
    a828:	10800003 	ldbu	r2,0(r2)
    a82c:	10803fcc 	andi	r2,r2,255
    a830:	1080201c 	xori	r2,r2,128
    a834:	10bfe004 	addi	r2,r2,-128
    a838:	10800be0 	cmpeqi	r2,r2,47
    a83c:	1000081e 	bne	r2,zero,a860 <alt_find_file+0xb8>
    a840:	e0bffe17 	ldw	r2,-8(fp)
    a844:	e0ffff17 	ldw	r3,-4(fp)
    a848:	1885883a 	add	r2,r3,r2
    a84c:	10800003 	ldbu	r2,0(r2)
    a850:	10803fcc 	andi	r2,r2,255
    a854:	1080201c 	xori	r2,r2,128
    a858:	10bfe004 	addi	r2,r2,-128
    a85c:	10000a1e 	bne	r2,zero,a888 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a860:	e0bffd17 	ldw	r2,-12(fp)
    a864:	10c00217 	ldw	r3,8(r2)
    a868:	e0bffe17 	ldw	r2,-8(fp)
    a86c:	1809883a 	mov	r4,r3
    a870:	e17fff17 	ldw	r5,-4(fp)
    a874:	100d883a 	mov	r6,r2
    a878:	000aa300 	call	aa30 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a87c:	1000021e 	bne	r2,zero,a888 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a880:	e0bffd17 	ldw	r2,-12(fp)
    a884:	00000806 	br	a8a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a888:	e0bffd17 	ldw	r2,-12(fp)
    a88c:	10800017 	ldw	r2,0(r2)
    a890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a894:	e0fffd17 	ldw	r3,-12(fp)
    a898:	00800074 	movhi	r2,1
    a89c:	10b09404 	addi	r2,r2,-15792
    a8a0:	18bfcb1e 	bne	r3,r2,a7d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a8a4:	0005883a 	mov	r2,zero
}
    a8a8:	e037883a 	mov	sp,fp
    a8ac:	dfc00117 	ldw	ra,4(sp)
    a8b0:	df000017 	ldw	fp,0(sp)
    a8b4:	dec00204 	addi	sp,sp,8
    a8b8:	f800283a 	ret

0000a8bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a8bc:	defffc04 	addi	sp,sp,-16
    a8c0:	df000315 	stw	fp,12(sp)
    a8c4:	df000304 	addi	fp,sp,12
    a8c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a8cc:	00bffa04 	movi	r2,-24
    a8d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a8d4:	e03ffd15 	stw	zero,-12(fp)
    a8d8:	00001d06 	br	a950 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    a8dc:	00c00074 	movhi	r3,1
    a8e0:	18effc04 	addi	r3,r3,-16400
    a8e4:	e0bffd17 	ldw	r2,-12(fp)
    a8e8:	10800324 	muli	r2,r2,12
    a8ec:	1885883a 	add	r2,r3,r2
    a8f0:	10800017 	ldw	r2,0(r2)
    a8f4:	1000131e 	bne	r2,zero,a944 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    a8f8:	00c00074 	movhi	r3,1
    a8fc:	18effc04 	addi	r3,r3,-16400
    a900:	e0bffd17 	ldw	r2,-12(fp)
    a904:	10800324 	muli	r2,r2,12
    a908:	1885883a 	add	r2,r3,r2
    a90c:	e0ffff17 	ldw	r3,-4(fp)
    a910:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a914:	00800074 	movhi	r2,1
    a918:	10b09804 	addi	r2,r2,-15776
    a91c:	10c00017 	ldw	r3,0(r2)
    a920:	e0bffd17 	ldw	r2,-12(fp)
    a924:	1880040e 	bge	r3,r2,a938 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    a928:	00800074 	movhi	r2,1
    a92c:	10b09804 	addi	r2,r2,-15776
    a930:	e0fffd17 	ldw	r3,-12(fp)
    a934:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a938:	e0bffd17 	ldw	r2,-12(fp)
    a93c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a940:	00000606 	br	a95c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a944:	e0bffd17 	ldw	r2,-12(fp)
    a948:	10800044 	addi	r2,r2,1
    a94c:	e0bffd15 	stw	r2,-12(fp)
    a950:	e0bffd17 	ldw	r2,-12(fp)
    a954:	10800810 	cmplti	r2,r2,32
    a958:	103fe01e 	bne	r2,zero,a8dc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a95c:	e0bffe17 	ldw	r2,-8(fp)
}
    a960:	e037883a 	mov	sp,fp
    a964:	df000017 	ldw	fp,0(sp)
    a968:	dec00104 	addi	sp,sp,4
    a96c:	f800283a 	ret

0000a970 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a970:	defffb04 	addi	sp,sp,-20
    a974:	df000415 	stw	fp,16(sp)
    a978:	df000404 	addi	fp,sp,16
    a97c:	e13ffe15 	stw	r4,-8(fp)
    a980:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a984:	e0bfff17 	ldw	r2,-4(fp)
    a988:	10840070 	cmpltui	r2,r2,4097
    a98c:	1000021e 	bne	r2,zero,a998 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a990:	00840004 	movi	r2,4096
    a994:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a998:	e0fffe17 	ldw	r3,-8(fp)
    a99c:	e0bfff17 	ldw	r2,-4(fp)
    a9a0:	1885883a 	add	r2,r3,r2
    a9a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	e0bffc15 	stw	r2,-16(fp)
    a9b0:	00000506 	br	a9c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a9b4:	e0bffc17 	ldw	r2,-16(fp)
    a9b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a9bc:	e0bffc17 	ldw	r2,-16(fp)
    a9c0:	10800804 	addi	r2,r2,32
    a9c4:	e0bffc15 	stw	r2,-16(fp)
    a9c8:	e0fffc17 	ldw	r3,-16(fp)
    a9cc:	e0bffd17 	ldw	r2,-12(fp)
    a9d0:	18bff836 	bltu	r3,r2,a9b4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a9d4:	e0bffe17 	ldw	r2,-8(fp)
    a9d8:	108007cc 	andi	r2,r2,31
    a9dc:	10000226 	beq	r2,zero,a9e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a9e0:	e0bffc17 	ldw	r2,-16(fp)
    a9e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a9e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a9ec:	e037883a 	mov	sp,fp
    a9f0:	df000017 	ldw	fp,0(sp)
    a9f4:	dec00104 	addi	sp,sp,4
    a9f8:	f800283a 	ret

0000a9fc <atexit>:
    a9fc:	200b883a 	mov	r5,r4
    aa00:	000d883a 	mov	r6,zero
    aa04:	0009883a 	mov	r4,zero
    aa08:	000f883a 	mov	r7,zero
    aa0c:	000aac81 	jmpi	aac8 <__register_exitproc>

0000aa10 <exit>:
    aa10:	defffe04 	addi	sp,sp,-8
    aa14:	000b883a 	mov	r5,zero
    aa18:	dc000015 	stw	r16,0(sp)
    aa1c:	dfc00115 	stw	ra,4(sp)
    aa20:	2021883a 	mov	r16,r4
    aa24:	000ac500 	call	ac50 <__call_exitprocs>
    aa28:	8009883a 	mov	r4,r16
    aa2c:	000ae280 	call	ae28 <_exit>

0000aa30 <memcmp>:
    aa30:	30000d26 	beq	r6,zero,aa68 <memcmp+0x38>
    aa34:	20c00003 	ldbu	r3,0(r4)
    aa38:	28800003 	ldbu	r2,0(r5)
    aa3c:	18800c1e 	bne	r3,r2,aa70 <memcmp+0x40>
    aa40:	31bfff84 	addi	r6,r6,-2
    aa44:	01ffffc4 	movi	r7,-1
    aa48:	00000406 	br	aa5c <memcmp+0x2c>
    aa4c:	20c00003 	ldbu	r3,0(r4)
    aa50:	28800003 	ldbu	r2,0(r5)
    aa54:	31bfffc4 	addi	r6,r6,-1
    aa58:	1880051e 	bne	r3,r2,aa70 <memcmp+0x40>
    aa5c:	21000044 	addi	r4,r4,1
    aa60:	29400044 	addi	r5,r5,1
    aa64:	31fff91e 	bne	r6,r7,aa4c <memcmp+0x1c>
    aa68:	0005883a 	mov	r2,zero
    aa6c:	f800283a 	ret
    aa70:	1885c83a 	sub	r2,r3,r2
    aa74:	f800283a 	ret

0000aa78 <memcpy>:
    aa78:	2005883a 	mov	r2,r4
    aa7c:	30000726 	beq	r6,zero,aa9c <memcpy+0x24>
    aa80:	218d883a 	add	r6,r4,r6
    aa84:	2007883a 	mov	r3,r4
    aa88:	29c00003 	ldbu	r7,0(r5)
    aa8c:	18c00044 	addi	r3,r3,1
    aa90:	29400044 	addi	r5,r5,1
    aa94:	19ffffc5 	stb	r7,-1(r3)
    aa98:	19bffb1e 	bne	r3,r6,aa88 <memcpy+0x10>
    aa9c:	f800283a 	ret

0000aaa0 <strlen>:
    aaa0:	20800007 	ldb	r2,0(r4)
    aaa4:	10000626 	beq	r2,zero,aac0 <strlen+0x20>
    aaa8:	2005883a 	mov	r2,r4
    aaac:	10800044 	addi	r2,r2,1
    aab0:	10c00007 	ldb	r3,0(r2)
    aab4:	183ffd1e 	bne	r3,zero,aaac <strlen+0xc>
    aab8:	1105c83a 	sub	r2,r2,r4
    aabc:	f800283a 	ret
    aac0:	0005883a 	mov	r2,zero
    aac4:	f800283a 	ret

0000aac8 <__register_exitproc>:
    aac8:	defff904 	addi	sp,sp,-28
    aacc:	00800074 	movhi	r2,1
    aad0:	10b09d04 	addi	r2,r2,-15756
    aad4:	dc400415 	stw	r17,16(sp)
    aad8:	14400017 	ldw	r17,0(r2)
    aadc:	dc000315 	stw	r16,12(sp)
    aae0:	dc800515 	stw	r18,20(sp)
    aae4:	8c000c17 	ldw	r16,48(r17)
    aae8:	dfc00615 	stw	ra,24(sp)
    aaec:	2025883a 	mov	r18,r4
    aaf0:	80004226 	beq	r16,zero,abfc <__register_exitproc+0x134>
    aaf4:	80800117 	ldw	r2,4(r16)
    aaf8:	00c007c4 	movi	r3,31
    aafc:	1880180e 	bge	r3,r2,ab60 <__register_exitproc+0x98>
    ab00:	00800034 	movhi	r2,0
    ab04:	10800004 	addi	r2,r2,0
    ab08:	1000071e 	bne	r2,zero,ab28 <__register_exitproc+0x60>
    ab0c:	00bfffc4 	movi	r2,-1
    ab10:	dfc00617 	ldw	ra,24(sp)
    ab14:	dc800517 	ldw	r18,20(sp)
    ab18:	dc400417 	ldw	r17,16(sp)
    ab1c:	dc000317 	ldw	r16,12(sp)
    ab20:	dec00704 	addi	sp,sp,28
    ab24:	f800283a 	ret
    ab28:	01002304 	movi	r4,140
    ab2c:	d9400015 	stw	r5,0(sp)
    ab30:	d9800115 	stw	r6,4(sp)
    ab34:	d9c00215 	stw	r7,8(sp)
    ab38:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    ab3c:	1021883a 	mov	r16,r2
    ab40:	d9400017 	ldw	r5,0(sp)
    ab44:	d9800117 	ldw	r6,4(sp)
    ab48:	d9c00217 	ldw	r7,8(sp)
    ab4c:	103fef26 	beq	r2,zero,ab0c <__register_exitproc+0x44>
    ab50:	88800c17 	ldw	r2,48(r17)
    ab54:	80000115 	stw	zero,4(r16)
    ab58:	80800015 	stw	r2,0(r16)
    ab5c:	8c000c15 	stw	r16,48(r17)
    ab60:	90001726 	beq	r18,zero,abc0 <__register_exitproc+0xf8>
    ab64:	80802217 	ldw	r2,136(r16)
    ab68:	10002826 	beq	r2,zero,ac0c <__register_exitproc+0x144>
    ab6c:	12804017 	ldw	r10,256(r2)
    ab70:	80c00117 	ldw	r3,4(r16)
    ab74:	02400044 	movi	r9,1
    ab78:	48d2983a 	sll	r9,r9,r3
    ab7c:	19000804 	addi	r4,r3,32
    ab80:	18d1883a 	add	r8,r3,r3
    ab84:	2109883a 	add	r4,r4,r4
    ab88:	4211883a 	add	r8,r8,r8
    ab8c:	2109883a 	add	r4,r4,r4
    ab90:	1109883a 	add	r4,r2,r4
    ab94:	1211883a 	add	r8,r2,r8
    ab98:	5254b03a 	or	r10,r10,r9
    ab9c:	21c00015 	stw	r7,0(r4)
    aba0:	41800015 	stw	r6,0(r8)
    aba4:	12804015 	stw	r10,256(r2)
    aba8:	01000084 	movi	r4,2
    abac:	9100051e 	bne	r18,r4,abc4 <__register_exitproc+0xfc>
    abb0:	11004117 	ldw	r4,260(r2)
    abb4:	2252b03a 	or	r9,r4,r9
    abb8:	12404115 	stw	r9,260(r2)
    abbc:	00000106 	br	abc4 <__register_exitproc+0xfc>
    abc0:	80c00117 	ldw	r3,4(r16)
    abc4:	18800084 	addi	r2,r3,2
    abc8:	1085883a 	add	r2,r2,r2
    abcc:	1085883a 	add	r2,r2,r2
    abd0:	8085883a 	add	r2,r16,r2
    abd4:	18c00044 	addi	r3,r3,1
    abd8:	11400015 	stw	r5,0(r2)
    abdc:	0005883a 	mov	r2,zero
    abe0:	80c00115 	stw	r3,4(r16)
    abe4:	dfc00617 	ldw	ra,24(sp)
    abe8:	dc800517 	ldw	r18,20(sp)
    abec:	dc400417 	ldw	r17,16(sp)
    abf0:	dc000317 	ldw	r16,12(sp)
    abf4:	dec00704 	addi	sp,sp,28
    abf8:	f800283a 	ret
    abfc:	04000074 	movhi	r16,1
    ac00:	8435de04 	addi	r16,r16,-10376
    ac04:	8c000c15 	stw	r16,48(r17)
    ac08:	003fba06 	br	aaf4 <__register_exitproc+0x2c>
    ac0c:	00800034 	movhi	r2,0
    ac10:	10800004 	addi	r2,r2,0
    ac14:	103fbd26 	beq	r2,zero,ab0c <__register_exitproc+0x44>
    ac18:	d9400015 	stw	r5,0(sp)
    ac1c:	d9800115 	stw	r6,4(sp)
    ac20:	d9c00215 	stw	r7,8(sp)
    ac24:	01004204 	movi	r4,264
    ac28:	103ee83a 	callr	r2
    ac2c:	d9400017 	ldw	r5,0(sp)
    ac30:	d9800117 	ldw	r6,4(sp)
    ac34:	d9c00217 	ldw	r7,8(sp)
    ac38:	103fb426 	beq	r2,zero,ab0c <__register_exitproc+0x44>
    ac3c:	10004015 	stw	zero,256(r2)
    ac40:	10004115 	stw	zero,260(r2)
    ac44:	80802215 	stw	r2,136(r16)
    ac48:	0015883a 	mov	r10,zero
    ac4c:	003fc806 	br	ab70 <__register_exitproc+0xa8>

0000ac50 <__call_exitprocs>:
    ac50:	00800074 	movhi	r2,1
    ac54:	10b09d04 	addi	r2,r2,-15756
    ac58:	10800017 	ldw	r2,0(r2)
    ac5c:	defff204 	addi	sp,sp,-56
    ac60:	df000c15 	stw	fp,48(sp)
    ac64:	d8800015 	stw	r2,0(sp)
    ac68:	10800c04 	addi	r2,r2,48
    ac6c:	dd400915 	stw	r21,36(sp)
    ac70:	dfc00d15 	stw	ra,52(sp)
    ac74:	ddc00b15 	stw	r23,44(sp)
    ac78:	dd800a15 	stw	r22,40(sp)
    ac7c:	dd000815 	stw	r20,32(sp)
    ac80:	dcc00715 	stw	r19,28(sp)
    ac84:	dc800615 	stw	r18,24(sp)
    ac88:	dc400515 	stw	r17,20(sp)
    ac8c:	dc000415 	stw	r16,16(sp)
    ac90:	d9000115 	stw	r4,4(sp)
    ac94:	2839883a 	mov	fp,r5
    ac98:	d8800215 	stw	r2,8(sp)
    ac9c:	057fffc4 	movi	r21,-1
    aca0:	d8800017 	ldw	r2,0(sp)
    aca4:	dd800217 	ldw	r22,8(sp)
    aca8:	15c00c17 	ldw	r23,48(r2)
    acac:	b8001b26 	beq	r23,zero,ad1c <__call_exitprocs+0xcc>
    acb0:	b9000117 	ldw	r4,4(r23)
    acb4:	bd002217 	ldw	r20,136(r23)
    acb8:	243fffc4 	addi	r16,r4,-1
    acbc:	80001416 	blt	r16,zero,ad10 <__call_exitprocs+0xc0>
    acc0:	244007c4 	addi	r17,r4,31
    acc4:	21000044 	addi	r4,r4,1
    acc8:	8c63883a 	add	r17,r17,r17
    accc:	8427883a 	add	r19,r16,r16
    acd0:	2109883a 	add	r4,r4,r4
    acd4:	8c63883a 	add	r17,r17,r17
    acd8:	9ce7883a 	add	r19,r19,r19
    acdc:	2109883a 	add	r4,r4,r4
    ace0:	a463883a 	add	r17,r20,r17
    ace4:	a4e7883a 	add	r19,r20,r19
    ace8:	b925883a 	add	r18,r23,r4
    acec:	e0001726 	beq	fp,zero,ad4c <__call_exitprocs+0xfc>
    acf0:	a0000226 	beq	r20,zero,acfc <__call_exitprocs+0xac>
    acf4:	89400017 	ldw	r5,0(r17)
    acf8:	2f001426 	beq	r5,fp,ad4c <__call_exitprocs+0xfc>
    acfc:	843fffc4 	addi	r16,r16,-1
    ad00:	8c7fff04 	addi	r17,r17,-4
    ad04:	9cffff04 	addi	r19,r19,-4
    ad08:	94bfff04 	addi	r18,r18,-4
    ad0c:	857ff71e 	bne	r16,r21,acec <__call_exitprocs+0x9c>
    ad10:	00800034 	movhi	r2,0
    ad14:	10800004 	addi	r2,r2,0
    ad18:	1000311e 	bne	r2,zero,ade0 <__call_exitprocs+0x190>
    ad1c:	dfc00d17 	ldw	ra,52(sp)
    ad20:	df000c17 	ldw	fp,48(sp)
    ad24:	ddc00b17 	ldw	r23,44(sp)
    ad28:	dd800a17 	ldw	r22,40(sp)
    ad2c:	dd400917 	ldw	r21,36(sp)
    ad30:	dd000817 	ldw	r20,32(sp)
    ad34:	dcc00717 	ldw	r19,28(sp)
    ad38:	dc800617 	ldw	r18,24(sp)
    ad3c:	dc400517 	ldw	r17,20(sp)
    ad40:	dc000417 	ldw	r16,16(sp)
    ad44:	dec00e04 	addi	sp,sp,56
    ad48:	f800283a 	ret
    ad4c:	b9000117 	ldw	r4,4(r23)
    ad50:	92000017 	ldw	r8,0(r18)
    ad54:	213fffc4 	addi	r4,r4,-1
    ad58:	24001a26 	beq	r4,r16,adc4 <__call_exitprocs+0x174>
    ad5c:	90000015 	stw	zero,0(r18)
    ad60:	403fe626 	beq	r8,zero,acfc <__call_exitprocs+0xac>
    ad64:	ba400117 	ldw	r9,4(r23)
    ad68:	a0001226 	beq	r20,zero,adb4 <__call_exitprocs+0x164>
    ad6c:	00800044 	movi	r2,1
    ad70:	1408983a 	sll	r4,r2,r16
    ad74:	a1404017 	ldw	r5,256(r20)
    ad78:	214a703a 	and	r5,r4,r5
    ad7c:	28000d26 	beq	r5,zero,adb4 <__call_exitprocs+0x164>
    ad80:	a1404117 	ldw	r5,260(r20)
    ad84:	2148703a 	and	r4,r4,r5
    ad88:	2000101e 	bne	r4,zero,adcc <__call_exitprocs+0x17c>
    ad8c:	99400017 	ldw	r5,0(r19)
    ad90:	d9000117 	ldw	r4,4(sp)
    ad94:	da400315 	stw	r9,12(sp)
    ad98:	403ee83a 	callr	r8
    ad9c:	da400317 	ldw	r9,12(sp)
    ada0:	b9000117 	ldw	r4,4(r23)
    ada4:	227fbe1e 	bne	r4,r9,aca0 <__call_exitprocs+0x50>
    ada8:	b1000017 	ldw	r4,0(r22)
    adac:	25ffd326 	beq	r4,r23,acfc <__call_exitprocs+0xac>
    adb0:	003fbb06 	br	aca0 <__call_exitprocs+0x50>
    adb4:	da400315 	stw	r9,12(sp)
    adb8:	403ee83a 	callr	r8
    adbc:	da400317 	ldw	r9,12(sp)
    adc0:	003ff706 	br	ada0 <__call_exitprocs+0x150>
    adc4:	bc000115 	stw	r16,4(r23)
    adc8:	003fe506 	br	ad60 <__call_exitprocs+0x110>
    adcc:	99000017 	ldw	r4,0(r19)
    add0:	da400315 	stw	r9,12(sp)
    add4:	403ee83a 	callr	r8
    add8:	da400317 	ldw	r9,12(sp)
    addc:	003ff006 	br	ada0 <__call_exitprocs+0x150>
    ade0:	b9000117 	ldw	r4,4(r23)
    ade4:	20000e1e 	bne	r4,zero,ae20 <__call_exitprocs+0x1d0>
    ade8:	b9000017 	ldw	r4,0(r23)
    adec:	20000826 	beq	r4,zero,ae10 <__call_exitprocs+0x1c0>
    adf0:	b1000015 	stw	r4,0(r22)
    adf4:	a0000226 	beq	r20,zero,ae00 <__call_exitprocs+0x1b0>
    adf8:	a009883a 	mov	r4,r20
    adfc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    ae00:	b809883a 	mov	r4,r23
    ae04:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    ae08:	b5c00017 	ldw	r23,0(r22)
    ae0c:	003fa706 	br	acac <__call_exitprocs+0x5c>
    ae10:	0007883a 	mov	r3,zero
    ae14:	b82d883a 	mov	r22,r23
    ae18:	182f883a 	mov	r23,r3
    ae1c:	003fa306 	br	acac <__call_exitprocs+0x5c>
    ae20:	b8c00017 	ldw	r3,0(r23)
    ae24:	003ffb06 	br	ae14 <__call_exitprocs+0x1c4>

0000ae28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ae28:	defffc04 	addi	sp,sp,-16
    ae2c:	df000315 	stw	fp,12(sp)
    ae30:	df000304 	addi	fp,sp,12
    ae34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ae38:	0001883a 	nop
    ae3c:	e0bfff17 	ldw	r2,-4(fp)
    ae40:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ae4c:	e0bffe17 	ldw	r2,-8(fp)
    ae50:	10000226 	beq	r2,zero,ae5c <_exit+0x34>
    ALT_SIM_FAIL();
    ae54:	002af070 	cmpltui	zero,zero,43969
    ae58:	00000106 	br	ae60 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    ae5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ae60:	003fff06 	br	ae60 <_exit+0x38>
